//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Croc.IncidentTracker {
    using System;
    using System.Text;
    
    
    /// Глубина анализа активностей
    public enum ActivityAnalysDepth : short {
        
        /// только выбранная активность
        OnlyCurrentActivity = 0,
        
        /// подчиненные активности 1 уровня
        FirstStageSubActivities = 1,
        
        /// подчиненные активности всех уровней
        AllStagesSubActivities = 2,
    }
    
    public class ActivityAnalysDepthItem {
        
        private ActivityAnalysDepth m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ActivityAnalysDepthItem m_OnlyCurrentActivity = new ActivityAnalysDepthItem(ActivityAnalysDepth.OnlyCurrentActivity, "OnlyCurrentActivity", "только выбранная активность");
        
        private static ActivityAnalysDepthItem m_FirstStageSubActivities = new ActivityAnalysDepthItem(ActivityAnalysDepth.FirstStageSubActivities, "FirstStageSubActivities", "подчиненные активности 1 уровня");
        
        private static ActivityAnalysDepthItem m_AllStagesSubActivities = new ActivityAnalysDepthItem(ActivityAnalysDepth.AllStagesSubActivities, "AllStagesSubActivities", "подчиненные активности всех уровней");
        
        private static ActivityAnalysDepthItem[] values = new ActivityAnalysDepthItem[] {
                ActivityAnalysDepthItem.m_OnlyCurrentActivity,
                ActivityAnalysDepthItem.m_FirstStageSubActivities,
                ActivityAnalysDepthItem.m_AllStagesSubActivities};
        
        private ActivityAnalysDepthItem(ActivityAnalysDepth value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ActivityAnalysDepthItem OnlyCurrentActivity {
            get {
                return ActivityAnalysDepthItem.m_OnlyCurrentActivity;
            }
        }
        
        public static ActivityAnalysDepthItem FirstStageSubActivities {
            get {
                return ActivityAnalysDepthItem.m_FirstStageSubActivities;
            }
        }
        
        public static ActivityAnalysDepthItem AllStagesSubActivities {
            get {
                return ActivityAnalysDepthItem.m_AllStagesSubActivities;
            }
        }
        
        public static ActivityAnalysDepthItem[] Values {
            get {
                return ActivityAnalysDepthItem.values;
            }
        }
        
        public ActivityAnalysDepth Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ActivityAnalysDepthItem GetItem(ActivityAnalysDepth nValue) {
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivityAnalysDepthItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivityAnalysDepthItem[] GetItems(ActivityAnalysDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ActivityAnalysDepthItem[] result = new ActivityAnalysDepthItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ActivityAnalysDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ActivityAnalysDepth nValue) {
            return ActivityAnalysDepthItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ActivityAnalysDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ActivityAnalysDepth nValue) {
            return ActivityAnalysDepthItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ActivityAnalysDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivityAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityAnalysDepthItem value = ((ActivityAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Уровень детализации активностей
    public enum ActivityDetalizationLevel : short {
        
        /// до подпроекта 1 уровня
        SubProject = 1,
        
        /// до менеджера проекта
        ProjectManager = 2,
        
        /// до кода проекта
        ProjectCode = 3,
    }
    
    public class ActivityDetalizationLevelItem {
        
        private ActivityDetalizationLevel m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ActivityDetalizationLevelItem m_SubProject = new ActivityDetalizationLevelItem(ActivityDetalizationLevel.SubProject, "SubProject", "до подпроекта 1 уровня");
        
        private static ActivityDetalizationLevelItem m_ProjectManager = new ActivityDetalizationLevelItem(ActivityDetalizationLevel.ProjectManager, "ProjectManager", "до менеджера проекта");
        
        private static ActivityDetalizationLevelItem m_ProjectCode = new ActivityDetalizationLevelItem(ActivityDetalizationLevel.ProjectCode, "ProjectCode", "до кода проекта");
        
        private static ActivityDetalizationLevelItem[] values = new ActivityDetalizationLevelItem[] {
                ActivityDetalizationLevelItem.m_SubProject,
                ActivityDetalizationLevelItem.m_ProjectManager,
                ActivityDetalizationLevelItem.m_ProjectCode};
        
        private ActivityDetalizationLevelItem(ActivityDetalizationLevel value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ActivityDetalizationLevelItem SubProject {
            get {
                return ActivityDetalizationLevelItem.m_SubProject;
            }
        }
        
        public static ActivityDetalizationLevelItem ProjectManager {
            get {
                return ActivityDetalizationLevelItem.m_ProjectManager;
            }
        }
        
        public static ActivityDetalizationLevelItem ProjectCode {
            get {
                return ActivityDetalizationLevelItem.m_ProjectCode;
            }
        }
        
        public static ActivityDetalizationLevelItem[] Values {
            get {
                return ActivityDetalizationLevelItem.values;
            }
        }
        
        public ActivityDetalizationLevel Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ActivityDetalizationLevelItem GetItem(ActivityDetalizationLevel nValue) {
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivityDetalizationLevelItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivityDetalizationLevelItem[] GetItems(ActivityDetalizationLevel nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ActivityDetalizationLevelItem[] result = new ActivityDetalizationLevelItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ActivityDetalizationLevel nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ActivityDetalizationLevel nValue) {
            return ActivityDetalizationLevelItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ActivityDetalizationLevel nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ActivityDetalizationLevel nValue) {
            return ActivityDetalizationLevelItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ActivityDetalizationLevel nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivityDetalizationLevelItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivityDetalizationLevelItem value = ((ActivityDetalizationLevelItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Выборка активностей
    public enum ActivitySelection : short {
        
        /// с затратами за период
        HaveExpenses = 1,
        
        /// переведенные в ожидание закрытия
        WaitingForClose = 2,
        
        /// закрытые за период
        Closed = 3,
    }
    
    public class ActivitySelectionItem {
        
        private ActivitySelection m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ActivitySelectionItem m_HaveExpenses = new ActivitySelectionItem(ActivitySelection.HaveExpenses, "HaveExpenses", "с затратами за период");
        
        private static ActivitySelectionItem m_WaitingForClose = new ActivitySelectionItem(ActivitySelection.WaitingForClose, "WaitingForClose", "переведенные в ожидание закрытия");
        
        private static ActivitySelectionItem m_Closed = new ActivitySelectionItem(ActivitySelection.Closed, "Closed", "закрытые за период");
        
        private static ActivitySelectionItem[] values = new ActivitySelectionItem[] {
                ActivitySelectionItem.m_HaveExpenses,
                ActivitySelectionItem.m_WaitingForClose,
                ActivitySelectionItem.m_Closed};
        
        private ActivitySelectionItem(ActivitySelection value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ActivitySelectionItem HaveExpenses {
            get {
                return ActivitySelectionItem.m_HaveExpenses;
            }
        }
        
        public static ActivitySelectionItem WaitingForClose {
            get {
                return ActivitySelectionItem.m_WaitingForClose;
            }
        }
        
        public static ActivitySelectionItem Closed {
            get {
                return ActivitySelectionItem.m_Closed;
            }
        }
        
        public static ActivitySelectionItem[] Values {
            get {
                return ActivitySelectionItem.values;
            }
        }
        
        public ActivitySelection Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ActivitySelectionItem GetItem(ActivitySelection nValue) {
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivitySelectionItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ActivitySelectionItem[] GetItems(ActivitySelection nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ActivitySelectionItem[] result = new ActivitySelectionItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ActivitySelection nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ActivitySelection nValue) {
            return ActivitySelectionItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ActivitySelection nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ActivitySelection nValue) {
            return ActivitySelectionItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ActivitySelection nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ActivitySelectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ActivitySelectionItem value = ((ActivitySelectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Направление анализа
    public enum AnalysDirection : short {
        
        /// за прошедший период
        LastYearExpenses = 0,
        
        /// открытые инциденты
        OpenedIncidents = 1,
    }
    
    public class AnalysDirectionItem {
        
        private AnalysDirection m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static AnalysDirectionItem m_LastYearExpenses = new AnalysDirectionItem(AnalysDirection.LastYearExpenses, "LastYearExpenses", "за прошедший период");
        
        private static AnalysDirectionItem m_OpenedIncidents = new AnalysDirectionItem(AnalysDirection.OpenedIncidents, "OpenedIncidents", "открытые инциденты");
        
        private static AnalysDirectionItem[] values = new AnalysDirectionItem[] {
                AnalysDirectionItem.m_LastYearExpenses,
                AnalysDirectionItem.m_OpenedIncidents};
        
        private AnalysDirectionItem(AnalysDirection value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static AnalysDirectionItem LastYearExpenses {
            get {
                return AnalysDirectionItem.m_LastYearExpenses;
            }
        }
        
        public static AnalysDirectionItem OpenedIncidents {
            get {
                return AnalysDirectionItem.m_OpenedIncidents;
            }
        }
        
        public static AnalysDirectionItem[] Values {
            get {
                return AnalysDirectionItem.values;
            }
        }
        
        public AnalysDirection Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static AnalysDirectionItem GetItem(AnalysDirection nValue) {
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static AnalysDirectionItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static AnalysDirectionItem[] GetItems(AnalysDirection nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            AnalysDirectionItem[] result = new AnalysDirectionItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(AnalysDirection nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(AnalysDirection nValue) {
            return AnalysDirectionItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(AnalysDirection nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(AnalysDirection nValue) {
            return AnalysDirectionItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(AnalysDirection nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = AnalysDirectionItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                AnalysDirectionItem value = ((AnalysDirectionItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип фильтрации по отраслям
    public enum BranchFilterType : short {
        
        /// Любые отрасли
        AnyBranches = 0,
        
        /// Все указанные
        AllSelected = 1,
        
        /// Хотя бы одна из указанных
        AnySelected = 2,
    }
    
    public class BranchFilterTypeItem {
        
        private BranchFilterType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static BranchFilterTypeItem m_AnyBranches = new BranchFilterTypeItem(BranchFilterType.AnyBranches, "AnyBranches", "Любые отрасли");
        
        private static BranchFilterTypeItem m_AllSelected = new BranchFilterTypeItem(BranchFilterType.AllSelected, "AllSelected", "Все указанные");
        
        private static BranchFilterTypeItem m_AnySelected = new BranchFilterTypeItem(BranchFilterType.AnySelected, "AnySelected", "Хотя бы одна из указанных");
        
        private static BranchFilterTypeItem[] values = new BranchFilterTypeItem[] {
                BranchFilterTypeItem.m_AnyBranches,
                BranchFilterTypeItem.m_AllSelected,
                BranchFilterTypeItem.m_AnySelected};
        
        private BranchFilterTypeItem(BranchFilterType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static BranchFilterTypeItem AnyBranches {
            get {
                return BranchFilterTypeItem.m_AnyBranches;
            }
        }
        
        public static BranchFilterTypeItem AllSelected {
            get {
                return BranchFilterTypeItem.m_AllSelected;
            }
        }
        
        public static BranchFilterTypeItem AnySelected {
            get {
                return BranchFilterTypeItem.m_AnySelected;
            }
        }
        
        public static BranchFilterTypeItem[] Values {
            get {
                return BranchFilterTypeItem.values;
            }
        }
        
        public BranchFilterType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static BranchFilterTypeItem GetItem(BranchFilterType nValue) {
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static BranchFilterTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static BranchFilterTypeItem[] GetItems(BranchFilterType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            BranchFilterTypeItem[] result = new BranchFilterTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(BranchFilterType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(BranchFilterType nValue) {
            return BranchFilterTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(BranchFilterType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(BranchFilterType nValue) {
            return BranchFilterTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(BranchFilterType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = BranchFilterTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                BranchFilterTypeItem value = ((BranchFilterTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Детализация по датам
    public enum DateDetalization : short {
        
        /// без дат (только сводные данные)
        NoDate = 0,
        
        /// даты с затратами (все колонки, имеющие данные)
        ExpencesDate = 1,
        
        /// все даты (все колонки отчета)
        AllDate = 2,
    }
    
    public class DateDetalizationItem {
        
        private DateDetalization m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DateDetalizationItem m_NoDate = new DateDetalizationItem(DateDetalization.NoDate, "NoDate", "без дат (только сводные данные)");
        
        private static DateDetalizationItem m_ExpencesDate = new DateDetalizationItem(DateDetalization.ExpencesDate, "ExpencesDate", "даты с затратами (все колонки, имеющие данные)");
        
        private static DateDetalizationItem m_AllDate = new DateDetalizationItem(DateDetalization.AllDate, "AllDate", "все даты (все колонки отчета)");
        
        private static DateDetalizationItem[] values = new DateDetalizationItem[] {
                DateDetalizationItem.m_NoDate,
                DateDetalizationItem.m_ExpencesDate,
                DateDetalizationItem.m_AllDate};
        
        private DateDetalizationItem(DateDetalization value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DateDetalizationItem NoDate {
            get {
                return DateDetalizationItem.m_NoDate;
            }
        }
        
        public static DateDetalizationItem ExpencesDate {
            get {
                return DateDetalizationItem.m_ExpencesDate;
            }
        }
        
        public static DateDetalizationItem AllDate {
            get {
                return DateDetalizationItem.m_AllDate;
            }
        }
        
        public static DateDetalizationItem[] Values {
            get {
                return DateDetalizationItem.values;
            }
        }
        
        public DateDetalization Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DateDetalizationItem GetItem(DateDetalization nValue) {
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DateDetalizationItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DateDetalizationItem[] GetItems(DateDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DateDetalizationItem[] result = new DateDetalizationItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DateDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DateDetalization nValue) {
            return DateDetalizationItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DateDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DateDetalization nValue) {
            return DateDetalizationItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DateDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DateDetalizationItem value = ((DateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Глубина анализа подразделений
    public enum DepartmentAnalysDepth : short {
        
        /// только выбранное подразделение
        OnlySelected = 0,
        
        /// подчиненные подразделения 1 уровня
        FirstSubLevel = 1,
        
        /// подчиненные подразделения всех уровней
        AllSubLevels = 2,
    }
    
    public class DepartmentAnalysDepthItem {
        
        private DepartmentAnalysDepth m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DepartmentAnalysDepthItem m_OnlySelected = new DepartmentAnalysDepthItem(DepartmentAnalysDepth.OnlySelected, "OnlySelected", "только выбранное подразделение");
        
        private static DepartmentAnalysDepthItem m_FirstSubLevel = new DepartmentAnalysDepthItem(DepartmentAnalysDepth.FirstSubLevel, "FirstSubLevel", "подчиненные подразделения 1 уровня");
        
        private static DepartmentAnalysDepthItem m_AllSubLevels = new DepartmentAnalysDepthItem(DepartmentAnalysDepth.AllSubLevels, "AllSubLevels", "подчиненные подразделения всех уровней");
        
        private static DepartmentAnalysDepthItem[] values = new DepartmentAnalysDepthItem[] {
                DepartmentAnalysDepthItem.m_OnlySelected,
                DepartmentAnalysDepthItem.m_FirstSubLevel,
                DepartmentAnalysDepthItem.m_AllSubLevels};
        
        private DepartmentAnalysDepthItem(DepartmentAnalysDepth value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DepartmentAnalysDepthItem OnlySelected {
            get {
                return DepartmentAnalysDepthItem.m_OnlySelected;
            }
        }
        
        public static DepartmentAnalysDepthItem FirstSubLevel {
            get {
                return DepartmentAnalysDepthItem.m_FirstSubLevel;
            }
        }
        
        public static DepartmentAnalysDepthItem AllSubLevels {
            get {
                return DepartmentAnalysDepthItem.m_AllSubLevels;
            }
        }
        
        public static DepartmentAnalysDepthItem[] Values {
            get {
                return DepartmentAnalysDepthItem.values;
            }
        }
        
        public DepartmentAnalysDepth Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DepartmentAnalysDepthItem GetItem(DepartmentAnalysDepth nValue) {
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentAnalysDepthItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentAnalysDepthItem[] GetItems(DepartmentAnalysDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DepartmentAnalysDepthItem[] result = new DepartmentAnalysDepthItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DepartmentAnalysDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DepartmentAnalysDepth nValue) {
            return DepartmentAnalysDepthItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DepartmentAnalysDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DepartmentAnalysDepth nValue) {
            return DepartmentAnalysDepthItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DepartmentAnalysDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentAnalysDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentAnalysDepthItem value = ((DepartmentAnalysDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Детализация отчета «Затраты в разрезе Департаментов»» 
    public enum DepartmentDetalization : short {
        
        /// Без детализации
        WithoutDetalization = 0,
        
        /// По департаментам
        ByDepartment = 1,
    }
    
    public class DepartmentDetalizationItem {
        
        private DepartmentDetalization m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DepartmentDetalizationItem m_WithoutDetalization = new DepartmentDetalizationItem(DepartmentDetalization.WithoutDetalization, "WithoutDetalization", "Без детализации");
        
        private static DepartmentDetalizationItem m_ByDepartment = new DepartmentDetalizationItem(DepartmentDetalization.ByDepartment, "ByDepartment", "По департаментам");
        
        private static DepartmentDetalizationItem[] values = new DepartmentDetalizationItem[] {
                DepartmentDetalizationItem.m_WithoutDetalization,
                DepartmentDetalizationItem.m_ByDepartment};
        
        private DepartmentDetalizationItem(DepartmentDetalization value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DepartmentDetalizationItem WithoutDetalization {
            get {
                return DepartmentDetalizationItem.m_WithoutDetalization;
            }
        }
        
        public static DepartmentDetalizationItem ByDepartment {
            get {
                return DepartmentDetalizationItem.m_ByDepartment;
            }
        }
        
        public static DepartmentDetalizationItem[] Values {
            get {
                return DepartmentDetalizationItem.values;
            }
        }
        
        public DepartmentDetalization Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DepartmentDetalizationItem GetItem(DepartmentDetalization nValue) {
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentDetalizationItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentDetalizationItem[] GetItems(DepartmentDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DepartmentDetalizationItem[] result = new DepartmentDetalizationItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DepartmentDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DepartmentDetalization nValue) {
            return DepartmentDetalizationItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DepartmentDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DepartmentDetalization nValue) {
            return DepartmentDetalizationItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DepartmentDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentDetalizationItem value = ((DepartmentDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип подразделения
    public enum DepartmentType : short {
        
        /// Центр затрат
        CostsCenter = 1,
        
        /// Центр прибыли
        ProfitCenter = 2,
        
        /// Отдел
        Direction = 3,
    }
    
    public class DepartmentTypeItem {
        
        private DepartmentType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DepartmentTypeItem m_CostsCenter = new DepartmentTypeItem(DepartmentType.CostsCenter, "CostsCenter", "Центр затрат");
        
        private static DepartmentTypeItem m_ProfitCenter = new DepartmentTypeItem(DepartmentType.ProfitCenter, "ProfitCenter", "Центр прибыли");
        
        private static DepartmentTypeItem m_Direction = new DepartmentTypeItem(DepartmentType.Direction, "Direction", "Отдел");
        
        private static DepartmentTypeItem[] values = new DepartmentTypeItem[] {
                DepartmentTypeItem.m_CostsCenter,
                DepartmentTypeItem.m_ProfitCenter,
                DepartmentTypeItem.m_Direction};
        
        private DepartmentTypeItem(DepartmentType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DepartmentTypeItem CostsCenter {
            get {
                return DepartmentTypeItem.m_CostsCenter;
            }
        }
        
        public static DepartmentTypeItem ProfitCenter {
            get {
                return DepartmentTypeItem.m_ProfitCenter;
            }
        }
        
        public static DepartmentTypeItem Direction {
            get {
                return DepartmentTypeItem.m_Direction;
            }
        }
        
        public static DepartmentTypeItem[] Values {
            get {
                return DepartmentTypeItem.values;
            }
        }
        
        public DepartmentType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DepartmentTypeItem GetItem(DepartmentType nValue) {
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DepartmentTypeItem[] GetItems(DepartmentType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DepartmentTypeItem[] result = new DepartmentTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DepartmentType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DepartmentType nValue) {
            return DepartmentTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DepartmentType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DepartmentType nValue) {
            return DepartmentTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DepartmentType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DepartmentTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DepartmentTypeItem value = ((DepartmentTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Режимы дерева ДКП
    public enum DKPTreeModes : short {
        
        /// Организации
        Organizations = 1,
        
        /// Активности
        Activities = 2,
    }
    
    public class DKPTreeModesItem {
        
        private DKPTreeModes m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DKPTreeModesItem m_Organizations = new DKPTreeModesItem(DKPTreeModes.Organizations, "Organizations", "Организации");
        
        private static DKPTreeModesItem m_Activities = new DKPTreeModesItem(DKPTreeModes.Activities, "Activities", "Активности");
        
        private static DKPTreeModesItem[] values = new DKPTreeModesItem[] {
                DKPTreeModesItem.m_Organizations,
                DKPTreeModesItem.m_Activities};
        
        private DKPTreeModesItem(DKPTreeModes value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DKPTreeModesItem Organizations {
            get {
                return DKPTreeModesItem.m_Organizations;
            }
        }
        
        public static DKPTreeModesItem Activities {
            get {
                return DKPTreeModesItem.m_Activities;
            }
        }
        
        public static DKPTreeModesItem[] Values {
            get {
                return DKPTreeModesItem.values;
            }
        }
        
        public DKPTreeModes Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DKPTreeModesItem GetItem(DKPTreeModes nValue) {
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DKPTreeModesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DKPTreeModesItem[] GetItems(DKPTreeModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DKPTreeModesItem[] result = new DKPTreeModesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DKPTreeModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DKPTreeModes nValue) {
            return DKPTreeModesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DKPTreeModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DKPTreeModes nValue) {
            return DKPTreeModesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DKPTreeModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DKPTreeModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DKPTreeModesItem value = ((DKPTreeModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип документации
    public enum DocumentationType : short {
        
        /// Платная
        Paid = 1,
        
        /// Бесплатная
        Free = 2,
    }
    
    public class DocumentationTypeItem {
        
        private DocumentationType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static DocumentationTypeItem m_Paid = new DocumentationTypeItem(DocumentationType.Paid, "Paid", "Платная");
        
        private static DocumentationTypeItem m_Free = new DocumentationTypeItem(DocumentationType.Free, "Free", "Бесплатная");
        
        private static DocumentationTypeItem[] values = new DocumentationTypeItem[] {
                DocumentationTypeItem.m_Paid,
                DocumentationTypeItem.m_Free};
        
        private DocumentationTypeItem(DocumentationType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static DocumentationTypeItem Paid {
            get {
                return DocumentationTypeItem.m_Paid;
            }
        }
        
        public static DocumentationTypeItem Free {
            get {
                return DocumentationTypeItem.m_Free;
            }
        }
        
        public static DocumentationTypeItem[] Values {
            get {
                return DocumentationTypeItem.values;
            }
        }
        
        public DocumentationType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static DocumentationTypeItem GetItem(DocumentationType nValue) {
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DocumentationTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static DocumentationTypeItem[] GetItems(DocumentationType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            DocumentationTypeItem[] result = new DocumentationTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(DocumentationType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(DocumentationType nValue) {
            return DocumentationTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(DocumentationType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(DocumentationType nValue) {
            return DocumentationTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(DocumentationType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = DocumentationTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                DocumentationTypeItem value = ((DocumentationTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип события сотрудника
    public enum EmployeeHistoryEvents : short {
        
        /// Выход на работу
        WorkBeginDay = 1,
        
        /// Окончание работы
        WorkEndDay = 2,
        
        /// Временно нетрудоспособен
        TemporaryDisability = 3,
        
        /// Изменение нормы рабочего времени
        ChangeRate = 4,
        
        /// Изменение параметров безопасности
        ChangeSecurity = 5,
    }
    
    public class EmployeeHistoryEventsItem {
        
        private EmployeeHistoryEvents m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static EmployeeHistoryEventsItem m_WorkBeginDay = new EmployeeHistoryEventsItem(EmployeeHistoryEvents.WorkBeginDay, "WorkBeginDay", "Выход на работу");
        
        private static EmployeeHistoryEventsItem m_WorkEndDay = new EmployeeHistoryEventsItem(EmployeeHistoryEvents.WorkEndDay, "WorkEndDay", "Окончание работы");
        
        private static EmployeeHistoryEventsItem m_TemporaryDisability = new EmployeeHistoryEventsItem(EmployeeHistoryEvents.TemporaryDisability, "TemporaryDisability", "Временно нетрудоспособен");
        
        private static EmployeeHistoryEventsItem m_ChangeRate = new EmployeeHistoryEventsItem(EmployeeHistoryEvents.ChangeRate, "ChangeRate", "Изменение нормы рабочего времени");
        
        private static EmployeeHistoryEventsItem m_ChangeSecurity = new EmployeeHistoryEventsItem(EmployeeHistoryEvents.ChangeSecurity, "ChangeSecurity", "Изменение параметров безопасности");
        
        private static EmployeeHistoryEventsItem[] values = new EmployeeHistoryEventsItem[] {
                EmployeeHistoryEventsItem.m_WorkBeginDay,
                EmployeeHistoryEventsItem.m_WorkEndDay,
                EmployeeHistoryEventsItem.m_TemporaryDisability,
                EmployeeHistoryEventsItem.m_ChangeRate,
                EmployeeHistoryEventsItem.m_ChangeSecurity};
        
        private EmployeeHistoryEventsItem(EmployeeHistoryEvents value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static EmployeeHistoryEventsItem WorkBeginDay {
            get {
                return EmployeeHistoryEventsItem.m_WorkBeginDay;
            }
        }
        
        public static EmployeeHistoryEventsItem WorkEndDay {
            get {
                return EmployeeHistoryEventsItem.m_WorkEndDay;
            }
        }
        
        public static EmployeeHistoryEventsItem TemporaryDisability {
            get {
                return EmployeeHistoryEventsItem.m_TemporaryDisability;
            }
        }
        
        public static EmployeeHistoryEventsItem ChangeRate {
            get {
                return EmployeeHistoryEventsItem.m_ChangeRate;
            }
        }
        
        public static EmployeeHistoryEventsItem ChangeSecurity {
            get {
                return EmployeeHistoryEventsItem.m_ChangeSecurity;
            }
        }
        
        public static EmployeeHistoryEventsItem[] Values {
            get {
                return EmployeeHistoryEventsItem.values;
            }
        }
        
        public EmployeeHistoryEvents Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static EmployeeHistoryEventsItem GetItem(EmployeeHistoryEvents nValue) {
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static EmployeeHistoryEventsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static EmployeeHistoryEventsItem[] GetItems(EmployeeHistoryEvents nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            EmployeeHistoryEventsItem[] result = new EmployeeHistoryEventsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(EmployeeHistoryEvents nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(EmployeeHistoryEvents nValue) {
            return EmployeeHistoryEventsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(EmployeeHistoryEvents nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(EmployeeHistoryEvents nValue) {
            return EmployeeHistoryEventsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(EmployeeHistoryEvents nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = EmployeeHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EmployeeHistoryEventsItem value = ((EmployeeHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Класс события
    public enum EventClass {
        
        /// Создание инцидента
        EVENT_TYPE_01 = 1,
        
        /// Изменение состояние инцидента
        EVENT_TYPE_02 = 2,
        
        /// Удаление инцидента
        EVENT_TYPE_03 = 3,
        
        /// Создание описания нового задания по инциденту
        EVENT_TYPE_04 = 4,
        
        /// Изменение роли исполнителя в задании по инциденту
        EVENT_TYPE_05 = 5,
        
        /// Удаление задания по инциденту
        EVENT_TYPE_06 = 6,
        
        /// Изменение наименования, описания или описания решения инцидента
        EVENT_TYPE_07 = 7,
        
        /// Изменение приоритета или крайнего срока инцидента
        EVENT_TYPE_08 = 8,
        
        /// Перенос инцидента в другую активность - экспорт
        EVENT_TYPE_09 = 9,
        
        /// Перенос инцидента в другую активность - импорт
        EVENT_TYPE_10 = 10,
        
        /// Добавление участника проектной команды
        EVENT_TYPE_11 = 11,
        
        /// Удаление участника проектной команды
        EVENT_TYPE_12 = 12,
        
        /// Снятие роли для участника проектной команды
        EVENT_TYPE_13 = 13,
        
        /// Добавление роли для участника проектной команды
        EVENT_TYPE_14 = 14,
        
        /// Удаление организации
        EVENT_TYPE_15 = 15,
        
        /// Снятие Директора Клиента (организации)
        EVENT_TYPE_16 = 16,
        
        /// Задание Директора Клиента (организации)
        EVENT_TYPE_17 = 17,
        
        /// Изменение наименования проектной активности (папки)
        EVENT_TYPE_18 = 18,
        
        /// Изменение внешнего ID проектной активности (папки)
        EVENT_TYPE_19 = 19,
        
        /// Изменение блокировки списаний по проектной активности (папки)
        EVENT_TYPE_20 = 20,
        
        /// Удаление корневой проектной активности (папки)
        EVENT_TYPE_21 = 21,
        
        /// Удаление некорневой проектной активности (папки)
        EVENT_TYPE_22 = 22,
        
        /// Создание корневой проектной активности (папки)
        EVENT_TYPE_23 = 23,
        
        /// Создание некорневой проектной активности (папки)
        EVENT_TYPE_24 = 24,
        
        /// Изменение Клиента у проектной активности - экспорт
        EVENT_TYPE_25 = 25,
        
        /// Изменение Клиента у проектной активности - импорт
        EVENT_TYPE_26 = 26,
        
        /// Перенос проектной активности в другую папку - экспорт
        EVENT_TYPE_27 = 27,
        
        /// Перенос проектной активности в другую папку - импорт
        EVENT_TYPE_28 = 28,
        
        /// Изменение состояния у проектной активности
        EVENT_TYPE_29 = 29,
        
        /// Изменение типа активности у проектной активности
        EVENT_TYPE_30 = 30,
        
        /// Перенос организации - экспорт
        EVENT_TYPE_31 = 31,
        
        /// Перенос организации - импорт
        EVENT_TYPE_32 = 32,
        
        /// Изменение наименования или сокращённого наименования организации
        EVENT_TYPE_33 = 33,
        
        /// Создание организации
        EVENT_TYPE_34 = 34,
        
        /// Нарушение плана занятости сотрудником
        EVENT_TYPE_65 = 65,
        
        /// Изменение запланированного времени
        EVENT_TYPE_35 = 35,
        
        /// Изменение оставшегося времени
        EVENT_TYPE_36 = 36,
        
        /// Установка (изменение) общесистемной блокировки списаний
        EVENT_TYPE_37 = 37,
        
        /// Создание временной организации
        EVENT_TYPE_38 = 38,
        
        /// Замена временного описания организации постоянным
        EVENT_TYPE_39 = 39,
        
        /// Создание нового тендера
        EVENT_TYPE_40 = 40,
        
        /// Создание участия в лоте
        EVENT_TYPE_41 = 41,
        
        /// Модификация участника в лоте
        EVENT_TYPE_42 = 42,
        
        /// Удаление участника в лоте
        EVENT_TYPE_43 = 43,
        
        /// Изменение директора тендера - снятие
        EVENT_TYPE_44 = 44,
        
        /// Изменение директора тендера - назначение
        EVENT_TYPE_45 = 45,
        
        /// Удаление тендера
        EVENT_TYPE_46 = 46,
        
        /// Изменение состояния лота
        EVENT_TYPE_47 = 47,
        
        /// Превышение запланированного времени по инциденту
        EVENT_TYPE_48 = 48,
        
        /// Изменение плана занятости сотрудника
        EVENT_TYPE_63 = 63,
        
        /// Приближение крайнего срока инцидента
        EVENT_TYPE_49 = 49,
        
        /// Истечение крайнего срока инцидента
        EVENT_TYPE_50 = 50,
        
        /// Создание нового лота
        EVENT_TYPE_51 = 51,
        
        /// Превышение плановой занятости сотрудника на проектах
        EVENT_TYPE_64 = 64,
        
        /// Изменение лота
        EVENT_TYPE_52 = 52,
        
        /// Удаление лота
        EVENT_TYPE_53 = 53,
        
        /// Изменение описание тендера
        EVENT_TYPE_54 = 54,
        
        /// Измененме состояния тендера
        EVENT_TYPE_55 = 55,
        
        /// Добавления сотрудника в список лиц, принимающих участие в подготовке тендера
        EVENT_TYPE_56 = 56,
        
        /// Исключение сотрудника из списока лиц, принимающих участие в подготовке тендера
        EVENT_TYPE_57 = 57,
        
        /// Добавление направления у проектной активности (папки)
        EVENT_TYPE_58 = 58,
        
        /// Удаление направления у проектной активности (папки)
        EVENT_TYPE_59 = 59,
        
        /// Изменение доли затрат направления у проектной активности
        EVENT_TYPE_60 = 60,
        
        /// Изменение нормы рабочего времени сотрудника
        EVENT_TYPE_61 = 61,
        
        /// Переход проектной активности в состояние "Ожидание закрытия"
        EVENT_TYPE_62 = 62,
    }
    
    public class EventClassItem {
        
        private EventClass m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static EventClassItem m_EVENT_TYPE_01 = new EventClassItem(EventClass.EVENT_TYPE_01, "EVENT_TYPE_01", "Создание инцидента");
        
        private static EventClassItem m_EVENT_TYPE_02 = new EventClassItem(EventClass.EVENT_TYPE_02, "EVENT_TYPE_02", "Изменение состояние инцидента");
        
        private static EventClassItem m_EVENT_TYPE_03 = new EventClassItem(EventClass.EVENT_TYPE_03, "EVENT_TYPE_03", "Удаление инцидента");
        
        private static EventClassItem m_EVENT_TYPE_04 = new EventClassItem(EventClass.EVENT_TYPE_04, "EVENT_TYPE_04", "Создание описания нового задания по инциденту");
        
        private static EventClassItem m_EVENT_TYPE_05 = new EventClassItem(EventClass.EVENT_TYPE_05, "EVENT_TYPE_05", "Изменение роли исполнителя в задании по инциденту");
        
        private static EventClassItem m_EVENT_TYPE_06 = new EventClassItem(EventClass.EVENT_TYPE_06, "EVENT_TYPE_06", "Удаление задания по инциденту");
        
        private static EventClassItem m_EVENT_TYPE_07 = new EventClassItem(EventClass.EVENT_TYPE_07, "EVENT_TYPE_07", "Изменение наименования, описания или описания решения инцидента");
        
        private static EventClassItem m_EVENT_TYPE_08 = new EventClassItem(EventClass.EVENT_TYPE_08, "EVENT_TYPE_08", "Изменение приоритета или крайнего срока инцидента");
        
        private static EventClassItem m_EVENT_TYPE_09 = new EventClassItem(EventClass.EVENT_TYPE_09, "EVENT_TYPE_09", "Перенос инцидента в другую активность - экспорт");
        
        private static EventClassItem m_EVENT_TYPE_10 = new EventClassItem(EventClass.EVENT_TYPE_10, "EVENT_TYPE_10", "Перенос инцидента в другую активность - импорт");
        
        private static EventClassItem m_EVENT_TYPE_11 = new EventClassItem(EventClass.EVENT_TYPE_11, "EVENT_TYPE_11", "Добавление участника проектной команды");
        
        private static EventClassItem m_EVENT_TYPE_12 = new EventClassItem(EventClass.EVENT_TYPE_12, "EVENT_TYPE_12", "Удаление участника проектной команды");
        
        private static EventClassItem m_EVENT_TYPE_13 = new EventClassItem(EventClass.EVENT_TYPE_13, "EVENT_TYPE_13", "Снятие роли для участника проектной команды");
        
        private static EventClassItem m_EVENT_TYPE_14 = new EventClassItem(EventClass.EVENT_TYPE_14, "EVENT_TYPE_14", "Добавление роли для участника проектной команды");
        
        private static EventClassItem m_EVENT_TYPE_15 = new EventClassItem(EventClass.EVENT_TYPE_15, "EVENT_TYPE_15", "Удаление организации");
        
        private static EventClassItem m_EVENT_TYPE_16 = new EventClassItem(EventClass.EVENT_TYPE_16, "EVENT_TYPE_16", "Снятие Директора Клиента (организации)");
        
        private static EventClassItem m_EVENT_TYPE_17 = new EventClassItem(EventClass.EVENT_TYPE_17, "EVENT_TYPE_17", "Задание Директора Клиента (организации)");
        
        private static EventClassItem m_EVENT_TYPE_18 = new EventClassItem(EventClass.EVENT_TYPE_18, "EVENT_TYPE_18", "Изменение наименования проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_19 = new EventClassItem(EventClass.EVENT_TYPE_19, "EVENT_TYPE_19", "Изменение внешнего ID проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_20 = new EventClassItem(EventClass.EVENT_TYPE_20, "EVENT_TYPE_20", "Изменение блокировки списаний по проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_21 = new EventClassItem(EventClass.EVENT_TYPE_21, "EVENT_TYPE_21", "Удаление корневой проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_22 = new EventClassItem(EventClass.EVENT_TYPE_22, "EVENT_TYPE_22", "Удаление некорневой проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_23 = new EventClassItem(EventClass.EVENT_TYPE_23, "EVENT_TYPE_23", "Создание корневой проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_24 = new EventClassItem(EventClass.EVENT_TYPE_24, "EVENT_TYPE_24", "Создание некорневой проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_25 = new EventClassItem(EventClass.EVENT_TYPE_25, "EVENT_TYPE_25", "Изменение Клиента у проектной активности - экспорт");
        
        private static EventClassItem m_EVENT_TYPE_26 = new EventClassItem(EventClass.EVENT_TYPE_26, "EVENT_TYPE_26", "Изменение Клиента у проектной активности - импорт");
        
        private static EventClassItem m_EVENT_TYPE_27 = new EventClassItem(EventClass.EVENT_TYPE_27, "EVENT_TYPE_27", "Перенос проектной активности в другую папку - экспорт");
        
        private static EventClassItem m_EVENT_TYPE_28 = new EventClassItem(EventClass.EVENT_TYPE_28, "EVENT_TYPE_28", "Перенос проектной активности в другую папку - импорт");
        
        private static EventClassItem m_EVENT_TYPE_29 = new EventClassItem(EventClass.EVENT_TYPE_29, "EVENT_TYPE_29", "Изменение состояния у проектной активности");
        
        private static EventClassItem m_EVENT_TYPE_30 = new EventClassItem(EventClass.EVENT_TYPE_30, "EVENT_TYPE_30", "Изменение типа активности у проектной активности");
        
        private static EventClassItem m_EVENT_TYPE_31 = new EventClassItem(EventClass.EVENT_TYPE_31, "EVENT_TYPE_31", "Перенос организации - экспорт");
        
        private static EventClassItem m_EVENT_TYPE_32 = new EventClassItem(EventClass.EVENT_TYPE_32, "EVENT_TYPE_32", "Перенос организации - импорт");
        
        private static EventClassItem m_EVENT_TYPE_33 = new EventClassItem(EventClass.EVENT_TYPE_33, "EVENT_TYPE_33", "Изменение наименования или сокращённого наименования организации");
        
        private static EventClassItem m_EVENT_TYPE_34 = new EventClassItem(EventClass.EVENT_TYPE_34, "EVENT_TYPE_34", "Создание организации");
        
        private static EventClassItem m_EVENT_TYPE_65 = new EventClassItem(EventClass.EVENT_TYPE_65, "EVENT_TYPE_65", "Нарушение плана занятости сотрудником");
        
        private static EventClassItem m_EVENT_TYPE_35 = new EventClassItem(EventClass.EVENT_TYPE_35, "EVENT_TYPE_35", "Изменение запланированного времени");
        
        private static EventClassItem m_EVENT_TYPE_36 = new EventClassItem(EventClass.EVENT_TYPE_36, "EVENT_TYPE_36", "Изменение оставшегося времени");
        
        private static EventClassItem m_EVENT_TYPE_37 = new EventClassItem(EventClass.EVENT_TYPE_37, "EVENT_TYPE_37", "Установка (изменение) общесистемной блокировки списаний");
        
        private static EventClassItem m_EVENT_TYPE_38 = new EventClassItem(EventClass.EVENT_TYPE_38, "EVENT_TYPE_38", "Создание временной организации");
        
        private static EventClassItem m_EVENT_TYPE_39 = new EventClassItem(EventClass.EVENT_TYPE_39, "EVENT_TYPE_39", "Замена временного описания организации постоянным");
        
        private static EventClassItem m_EVENT_TYPE_40 = new EventClassItem(EventClass.EVENT_TYPE_40, "EVENT_TYPE_40", "Создание нового тендера");
        
        private static EventClassItem m_EVENT_TYPE_41 = new EventClassItem(EventClass.EVENT_TYPE_41, "EVENT_TYPE_41", "Создание участия в лоте");
        
        private static EventClassItem m_EVENT_TYPE_42 = new EventClassItem(EventClass.EVENT_TYPE_42, "EVENT_TYPE_42", "Модификация участника в лоте");
        
        private static EventClassItem m_EVENT_TYPE_43 = new EventClassItem(EventClass.EVENT_TYPE_43, "EVENT_TYPE_43", "Удаление участника в лоте");
        
        private static EventClassItem m_EVENT_TYPE_44 = new EventClassItem(EventClass.EVENT_TYPE_44, "EVENT_TYPE_44", "Изменение директора тендера - снятие");
        
        private static EventClassItem m_EVENT_TYPE_45 = new EventClassItem(EventClass.EVENT_TYPE_45, "EVENT_TYPE_45", "Изменение директора тендера - назначение");
        
        private static EventClassItem m_EVENT_TYPE_46 = new EventClassItem(EventClass.EVENT_TYPE_46, "EVENT_TYPE_46", "Удаление тендера");
        
        private static EventClassItem m_EVENT_TYPE_47 = new EventClassItem(EventClass.EVENT_TYPE_47, "EVENT_TYPE_47", "Изменение состояния лота");
        
        private static EventClassItem m_EVENT_TYPE_48 = new EventClassItem(EventClass.EVENT_TYPE_48, "EVENT_TYPE_48", "Превышение запланированного времени по инциденту");
        
        private static EventClassItem m_EVENT_TYPE_63 = new EventClassItem(EventClass.EVENT_TYPE_63, "EVENT_TYPE_63", "Изменение плана занятости сотрудника");
        
        private static EventClassItem m_EVENT_TYPE_49 = new EventClassItem(EventClass.EVENT_TYPE_49, "EVENT_TYPE_49", "Приближение крайнего срока инцидента");
        
        private static EventClassItem m_EVENT_TYPE_50 = new EventClassItem(EventClass.EVENT_TYPE_50, "EVENT_TYPE_50", "Истечение крайнего срока инцидента");
        
        private static EventClassItem m_EVENT_TYPE_51 = new EventClassItem(EventClass.EVENT_TYPE_51, "EVENT_TYPE_51", "Создание нового лота");
        
        private static EventClassItem m_EVENT_TYPE_64 = new EventClassItem(EventClass.EVENT_TYPE_64, "EVENT_TYPE_64", "Превышение плановой занятости сотрудника на проектах");
        
        private static EventClassItem m_EVENT_TYPE_52 = new EventClassItem(EventClass.EVENT_TYPE_52, "EVENT_TYPE_52", "Изменение лота");
        
        private static EventClassItem m_EVENT_TYPE_53 = new EventClassItem(EventClass.EVENT_TYPE_53, "EVENT_TYPE_53", "Удаление лота");
        
        private static EventClassItem m_EVENT_TYPE_54 = new EventClassItem(EventClass.EVENT_TYPE_54, "EVENT_TYPE_54", "Изменение описание тендера");
        
        private static EventClassItem m_EVENT_TYPE_55 = new EventClassItem(EventClass.EVENT_TYPE_55, "EVENT_TYPE_55", "Измененме состояния тендера");
        
        private static EventClassItem m_EVENT_TYPE_56 = new EventClassItem(EventClass.EVENT_TYPE_56, "EVENT_TYPE_56", "Добавления сотрудника в список лиц, принимающих участие в подготовке тендера");
        
        private static EventClassItem m_EVENT_TYPE_57 = new EventClassItem(EventClass.EVENT_TYPE_57, "EVENT_TYPE_57", "Исключение сотрудника из списока лиц, принимающих участие в подготовке тендера");
        
        private static EventClassItem m_EVENT_TYPE_58 = new EventClassItem(EventClass.EVENT_TYPE_58, "EVENT_TYPE_58", "Добавление направления у проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_59 = new EventClassItem(EventClass.EVENT_TYPE_59, "EVENT_TYPE_59", "Удаление направления у проектной активности (папки)");
        
        private static EventClassItem m_EVENT_TYPE_60 = new EventClassItem(EventClass.EVENT_TYPE_60, "EVENT_TYPE_60", "Изменение доли затрат направления у проектной активности");
        
        private static EventClassItem m_EVENT_TYPE_61 = new EventClassItem(EventClass.EVENT_TYPE_61, "EVENT_TYPE_61", "Изменение нормы рабочего времени сотрудника");
        
        private static EventClassItem m_EVENT_TYPE_62 = new EventClassItem(EventClass.EVENT_TYPE_62, "EVENT_TYPE_62", "Переход проектной активности в состояние \"Ожидание закрытия\"");
        
        private static EventClassItem[] values = new EventClassItem[] {
                EventClassItem.m_EVENT_TYPE_01,
                EventClassItem.m_EVENT_TYPE_02,
                EventClassItem.m_EVENT_TYPE_03,
                EventClassItem.m_EVENT_TYPE_04,
                EventClassItem.m_EVENT_TYPE_05,
                EventClassItem.m_EVENT_TYPE_06,
                EventClassItem.m_EVENT_TYPE_07,
                EventClassItem.m_EVENT_TYPE_08,
                EventClassItem.m_EVENT_TYPE_09,
                EventClassItem.m_EVENT_TYPE_10,
                EventClassItem.m_EVENT_TYPE_11,
                EventClassItem.m_EVENT_TYPE_12,
                EventClassItem.m_EVENT_TYPE_13,
                EventClassItem.m_EVENT_TYPE_14,
                EventClassItem.m_EVENT_TYPE_15,
                EventClassItem.m_EVENT_TYPE_16,
                EventClassItem.m_EVENT_TYPE_17,
                EventClassItem.m_EVENT_TYPE_18,
                EventClassItem.m_EVENT_TYPE_19,
                EventClassItem.m_EVENT_TYPE_20,
                EventClassItem.m_EVENT_TYPE_21,
                EventClassItem.m_EVENT_TYPE_22,
                EventClassItem.m_EVENT_TYPE_23,
                EventClassItem.m_EVENT_TYPE_24,
                EventClassItem.m_EVENT_TYPE_25,
                EventClassItem.m_EVENT_TYPE_26,
                EventClassItem.m_EVENT_TYPE_27,
                EventClassItem.m_EVENT_TYPE_28,
                EventClassItem.m_EVENT_TYPE_29,
                EventClassItem.m_EVENT_TYPE_30,
                EventClassItem.m_EVENT_TYPE_31,
                EventClassItem.m_EVENT_TYPE_32,
                EventClassItem.m_EVENT_TYPE_33,
                EventClassItem.m_EVENT_TYPE_34,
                EventClassItem.m_EVENT_TYPE_65,
                EventClassItem.m_EVENT_TYPE_35,
                EventClassItem.m_EVENT_TYPE_36,
                EventClassItem.m_EVENT_TYPE_37,
                EventClassItem.m_EVENT_TYPE_38,
                EventClassItem.m_EVENT_TYPE_39,
                EventClassItem.m_EVENT_TYPE_40,
                EventClassItem.m_EVENT_TYPE_41,
                EventClassItem.m_EVENT_TYPE_42,
                EventClassItem.m_EVENT_TYPE_43,
                EventClassItem.m_EVENT_TYPE_44,
                EventClassItem.m_EVENT_TYPE_45,
                EventClassItem.m_EVENT_TYPE_46,
                EventClassItem.m_EVENT_TYPE_47,
                EventClassItem.m_EVENT_TYPE_48,
                EventClassItem.m_EVENT_TYPE_63,
                EventClassItem.m_EVENT_TYPE_49,
                EventClassItem.m_EVENT_TYPE_50,
                EventClassItem.m_EVENT_TYPE_51,
                EventClassItem.m_EVENT_TYPE_64,
                EventClassItem.m_EVENT_TYPE_52,
                EventClassItem.m_EVENT_TYPE_53,
                EventClassItem.m_EVENT_TYPE_54,
                EventClassItem.m_EVENT_TYPE_55,
                EventClassItem.m_EVENT_TYPE_56,
                EventClassItem.m_EVENT_TYPE_57,
                EventClassItem.m_EVENT_TYPE_58,
                EventClassItem.m_EVENT_TYPE_59,
                EventClassItem.m_EVENT_TYPE_60,
                EventClassItem.m_EVENT_TYPE_61,
                EventClassItem.m_EVENT_TYPE_62};
        
        private EventClassItem(EventClass value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static EventClassItem EVENT_TYPE_01 {
            get {
                return EventClassItem.m_EVENT_TYPE_01;
            }
        }
        
        public static EventClassItem EVENT_TYPE_02 {
            get {
                return EventClassItem.m_EVENT_TYPE_02;
            }
        }
        
        public static EventClassItem EVENT_TYPE_03 {
            get {
                return EventClassItem.m_EVENT_TYPE_03;
            }
        }
        
        public static EventClassItem EVENT_TYPE_04 {
            get {
                return EventClassItem.m_EVENT_TYPE_04;
            }
        }
        
        public static EventClassItem EVENT_TYPE_05 {
            get {
                return EventClassItem.m_EVENT_TYPE_05;
            }
        }
        
        public static EventClassItem EVENT_TYPE_06 {
            get {
                return EventClassItem.m_EVENT_TYPE_06;
            }
        }
        
        public static EventClassItem EVENT_TYPE_07 {
            get {
                return EventClassItem.m_EVENT_TYPE_07;
            }
        }
        
        public static EventClassItem EVENT_TYPE_08 {
            get {
                return EventClassItem.m_EVENT_TYPE_08;
            }
        }
        
        public static EventClassItem EVENT_TYPE_09 {
            get {
                return EventClassItem.m_EVENT_TYPE_09;
            }
        }
        
        public static EventClassItem EVENT_TYPE_10 {
            get {
                return EventClassItem.m_EVENT_TYPE_10;
            }
        }
        
        public static EventClassItem EVENT_TYPE_11 {
            get {
                return EventClassItem.m_EVENT_TYPE_11;
            }
        }
        
        public static EventClassItem EVENT_TYPE_12 {
            get {
                return EventClassItem.m_EVENT_TYPE_12;
            }
        }
        
        public static EventClassItem EVENT_TYPE_13 {
            get {
                return EventClassItem.m_EVENT_TYPE_13;
            }
        }
        
        public static EventClassItem EVENT_TYPE_14 {
            get {
                return EventClassItem.m_EVENT_TYPE_14;
            }
        }
        
        public static EventClassItem EVENT_TYPE_15 {
            get {
                return EventClassItem.m_EVENT_TYPE_15;
            }
        }
        
        public static EventClassItem EVENT_TYPE_16 {
            get {
                return EventClassItem.m_EVENT_TYPE_16;
            }
        }
        
        public static EventClassItem EVENT_TYPE_17 {
            get {
                return EventClassItem.m_EVENT_TYPE_17;
            }
        }
        
        public static EventClassItem EVENT_TYPE_18 {
            get {
                return EventClassItem.m_EVENT_TYPE_18;
            }
        }
        
        public static EventClassItem EVENT_TYPE_19 {
            get {
                return EventClassItem.m_EVENT_TYPE_19;
            }
        }
        
        public static EventClassItem EVENT_TYPE_20 {
            get {
                return EventClassItem.m_EVENT_TYPE_20;
            }
        }
        
        public static EventClassItem EVENT_TYPE_21 {
            get {
                return EventClassItem.m_EVENT_TYPE_21;
            }
        }
        
        public static EventClassItem EVENT_TYPE_22 {
            get {
                return EventClassItem.m_EVENT_TYPE_22;
            }
        }
        
        public static EventClassItem EVENT_TYPE_23 {
            get {
                return EventClassItem.m_EVENT_TYPE_23;
            }
        }
        
        public static EventClassItem EVENT_TYPE_24 {
            get {
                return EventClassItem.m_EVENT_TYPE_24;
            }
        }
        
        public static EventClassItem EVENT_TYPE_25 {
            get {
                return EventClassItem.m_EVENT_TYPE_25;
            }
        }
        
        public static EventClassItem EVENT_TYPE_26 {
            get {
                return EventClassItem.m_EVENT_TYPE_26;
            }
        }
        
        public static EventClassItem EVENT_TYPE_27 {
            get {
                return EventClassItem.m_EVENT_TYPE_27;
            }
        }
        
        public static EventClassItem EVENT_TYPE_28 {
            get {
                return EventClassItem.m_EVENT_TYPE_28;
            }
        }
        
        public static EventClassItem EVENT_TYPE_29 {
            get {
                return EventClassItem.m_EVENT_TYPE_29;
            }
        }
        
        public static EventClassItem EVENT_TYPE_30 {
            get {
                return EventClassItem.m_EVENT_TYPE_30;
            }
        }
        
        public static EventClassItem EVENT_TYPE_31 {
            get {
                return EventClassItem.m_EVENT_TYPE_31;
            }
        }
        
        public static EventClassItem EVENT_TYPE_32 {
            get {
                return EventClassItem.m_EVENT_TYPE_32;
            }
        }
        
        public static EventClassItem EVENT_TYPE_33 {
            get {
                return EventClassItem.m_EVENT_TYPE_33;
            }
        }
        
        public static EventClassItem EVENT_TYPE_34 {
            get {
                return EventClassItem.m_EVENT_TYPE_34;
            }
        }
        
        public static EventClassItem EVENT_TYPE_65 {
            get {
                return EventClassItem.m_EVENT_TYPE_65;
            }
        }
        
        public static EventClassItem EVENT_TYPE_35 {
            get {
                return EventClassItem.m_EVENT_TYPE_35;
            }
        }
        
        public static EventClassItem EVENT_TYPE_36 {
            get {
                return EventClassItem.m_EVENT_TYPE_36;
            }
        }
        
        public static EventClassItem EVENT_TYPE_37 {
            get {
                return EventClassItem.m_EVENT_TYPE_37;
            }
        }
        
        public static EventClassItem EVENT_TYPE_38 {
            get {
                return EventClassItem.m_EVENT_TYPE_38;
            }
        }
        
        public static EventClassItem EVENT_TYPE_39 {
            get {
                return EventClassItem.m_EVENT_TYPE_39;
            }
        }
        
        public static EventClassItem EVENT_TYPE_40 {
            get {
                return EventClassItem.m_EVENT_TYPE_40;
            }
        }
        
        public static EventClassItem EVENT_TYPE_41 {
            get {
                return EventClassItem.m_EVENT_TYPE_41;
            }
        }
        
        public static EventClassItem EVENT_TYPE_42 {
            get {
                return EventClassItem.m_EVENT_TYPE_42;
            }
        }
        
        public static EventClassItem EVENT_TYPE_43 {
            get {
                return EventClassItem.m_EVENT_TYPE_43;
            }
        }
        
        public static EventClassItem EVENT_TYPE_44 {
            get {
                return EventClassItem.m_EVENT_TYPE_44;
            }
        }
        
        public static EventClassItem EVENT_TYPE_45 {
            get {
                return EventClassItem.m_EVENT_TYPE_45;
            }
        }
        
        public static EventClassItem EVENT_TYPE_46 {
            get {
                return EventClassItem.m_EVENT_TYPE_46;
            }
        }
        
        public static EventClassItem EVENT_TYPE_47 {
            get {
                return EventClassItem.m_EVENT_TYPE_47;
            }
        }
        
        public static EventClassItem EVENT_TYPE_48 {
            get {
                return EventClassItem.m_EVENT_TYPE_48;
            }
        }
        
        public static EventClassItem EVENT_TYPE_63 {
            get {
                return EventClassItem.m_EVENT_TYPE_63;
            }
        }
        
        public static EventClassItem EVENT_TYPE_49 {
            get {
                return EventClassItem.m_EVENT_TYPE_49;
            }
        }
        
        public static EventClassItem EVENT_TYPE_50 {
            get {
                return EventClassItem.m_EVENT_TYPE_50;
            }
        }
        
        public static EventClassItem EVENT_TYPE_51 {
            get {
                return EventClassItem.m_EVENT_TYPE_51;
            }
        }
        
        public static EventClassItem EVENT_TYPE_64 {
            get {
                return EventClassItem.m_EVENT_TYPE_64;
            }
        }
        
        public static EventClassItem EVENT_TYPE_52 {
            get {
                return EventClassItem.m_EVENT_TYPE_52;
            }
        }
        
        public static EventClassItem EVENT_TYPE_53 {
            get {
                return EventClassItem.m_EVENT_TYPE_53;
            }
        }
        
        public static EventClassItem EVENT_TYPE_54 {
            get {
                return EventClassItem.m_EVENT_TYPE_54;
            }
        }
        
        public static EventClassItem EVENT_TYPE_55 {
            get {
                return EventClassItem.m_EVENT_TYPE_55;
            }
        }
        
        public static EventClassItem EVENT_TYPE_56 {
            get {
                return EventClassItem.m_EVENT_TYPE_56;
            }
        }
        
        public static EventClassItem EVENT_TYPE_57 {
            get {
                return EventClassItem.m_EVENT_TYPE_57;
            }
        }
        
        public static EventClassItem EVENT_TYPE_58 {
            get {
                return EventClassItem.m_EVENT_TYPE_58;
            }
        }
        
        public static EventClassItem EVENT_TYPE_59 {
            get {
                return EventClassItem.m_EVENT_TYPE_59;
            }
        }
        
        public static EventClassItem EVENT_TYPE_60 {
            get {
                return EventClassItem.m_EVENT_TYPE_60;
            }
        }
        
        public static EventClassItem EVENT_TYPE_61 {
            get {
                return EventClassItem.m_EVENT_TYPE_61;
            }
        }
        
        public static EventClassItem EVENT_TYPE_62 {
            get {
                return EventClassItem.m_EVENT_TYPE_62;
            }
        }
        
        public static EventClassItem[] Values {
            get {
                return EventClassItem.values;
            }
        }
        
        public EventClass Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static EventClassItem GetItem(EventClass nValue) {
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static EventClassItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static EventClassItem[] GetItems(EventClass nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            EventClassItem[] result = new EventClassItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(EventClass nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(EventClass nValue) {
            return EventClassItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(EventClass nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(EventClass nValue) {
            return EventClassItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(EventClass nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = EventClassItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                EventClassItem value = ((EventClassItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Вид трудозатрат
    public enum ExpencesType : short {
        
        /// затраты на инциденты
        Incidents = 0,
        
        /// списания
        Discarding = 1,
        
        /// затраты на инциденты и списания
        Both = 2,
    }
    
    public class ExpencesTypeItem {
        
        private ExpencesType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ExpencesTypeItem m_Incidents = new ExpencesTypeItem(ExpencesType.Incidents, "Incidents", "затраты на инциденты");
        
        private static ExpencesTypeItem m_Discarding = new ExpencesTypeItem(ExpencesType.Discarding, "Discarding", "списания");
        
        private static ExpencesTypeItem m_Both = new ExpencesTypeItem(ExpencesType.Both, "Both", "затраты на инциденты и списания");
        
        private static ExpencesTypeItem[] values = new ExpencesTypeItem[] {
                ExpencesTypeItem.m_Incidents,
                ExpencesTypeItem.m_Discarding,
                ExpencesTypeItem.m_Both};
        
        private ExpencesTypeItem(ExpencesType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ExpencesTypeItem Incidents {
            get {
                return ExpencesTypeItem.m_Incidents;
            }
        }
        
        public static ExpencesTypeItem Discarding {
            get {
                return ExpencesTypeItem.m_Discarding;
            }
        }
        
        public static ExpencesTypeItem Both {
            get {
                return ExpencesTypeItem.m_Both;
            }
        }
        
        public static ExpencesTypeItem[] Values {
            get {
                return ExpencesTypeItem.values;
            }
        }
        
        public ExpencesType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ExpencesTypeItem GetItem(ExpencesType nValue) {
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ExpencesTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ExpencesTypeItem[] GetItems(ExpencesType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ExpencesTypeItem[] result = new ExpencesTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ExpencesType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ExpencesType nValue) {
            return ExpencesTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ExpencesType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ExpencesType nValue) {
            return ExpencesTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ExpencesType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ExpencesTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpencesTypeItem value = ((ExpencesTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Детализация затрат
    public enum ExpenseDetalization : short {
        
        /// по затратам
        ByExpences = 0,
        
        /// по инцидентам
        ByIncident = 1,
        
        /// по активностям нижнего уровня
        BySubActivity = 2,
    }
    
    public class ExpenseDetalizationItem {
        
        private ExpenseDetalization m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ExpenseDetalizationItem m_ByExpences = new ExpenseDetalizationItem(ExpenseDetalization.ByExpences, "ByExpences", "по затратам");
        
        private static ExpenseDetalizationItem m_ByIncident = new ExpenseDetalizationItem(ExpenseDetalization.ByIncident, "ByIncident", "по инцидентам");
        
        private static ExpenseDetalizationItem m_BySubActivity = new ExpenseDetalizationItem(ExpenseDetalization.BySubActivity, "BySubActivity", "по активностям нижнего уровня");
        
        private static ExpenseDetalizationItem[] values = new ExpenseDetalizationItem[] {
                ExpenseDetalizationItem.m_ByExpences,
                ExpenseDetalizationItem.m_ByIncident,
                ExpenseDetalizationItem.m_BySubActivity};
        
        private ExpenseDetalizationItem(ExpenseDetalization value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ExpenseDetalizationItem ByExpences {
            get {
                return ExpenseDetalizationItem.m_ByExpences;
            }
        }
        
        public static ExpenseDetalizationItem ByIncident {
            get {
                return ExpenseDetalizationItem.m_ByIncident;
            }
        }
        
        public static ExpenseDetalizationItem BySubActivity {
            get {
                return ExpenseDetalizationItem.m_BySubActivity;
            }
        }
        
        public static ExpenseDetalizationItem[] Values {
            get {
                return ExpenseDetalizationItem.values;
            }
        }
        
        public ExpenseDetalization Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ExpenseDetalizationItem GetItem(ExpenseDetalization nValue) {
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ExpenseDetalizationItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ExpenseDetalizationItem[] GetItems(ExpenseDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ExpenseDetalizationItem[] result = new ExpenseDetalizationItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ExpenseDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ExpenseDetalization nValue) {
            return ExpenseDetalizationItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ExpenseDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ExpenseDetalization nValue) {
            return ExpenseDetalizationItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ExpenseDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ExpenseDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ExpenseDetalizationItem value = ((ExpenseDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Плановая занятость сотрудников"
    public enum FilterReportEmploymentPlannedSortType : short {
        
        /// Без детализации
        WithoutSpecification = 0,
        
        /// По периодам
        Period = 1,
        
        /// По периодам и проектам
        Period_Project = 2,
    }
    
    public class FilterReportEmploymentPlannedSortTypeItem {
        
        private FilterReportEmploymentPlannedSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FilterReportEmploymentPlannedSortTypeItem m_WithoutSpecification = new FilterReportEmploymentPlannedSortTypeItem(FilterReportEmploymentPlannedSortType.WithoutSpecification, "WithoutSpecification", "Без детализации");
        
        private static FilterReportEmploymentPlannedSortTypeItem m_Period = new FilterReportEmploymentPlannedSortTypeItem(FilterReportEmploymentPlannedSortType.Period, "Period", "По периодам");
        
        private static FilterReportEmploymentPlannedSortTypeItem m_Period_Project = new FilterReportEmploymentPlannedSortTypeItem(FilterReportEmploymentPlannedSortType.Period_Project, "Period_Project", "По периодам и проектам");
        
        private static FilterReportEmploymentPlannedSortTypeItem[] values = new FilterReportEmploymentPlannedSortTypeItem[] {
                FilterReportEmploymentPlannedSortTypeItem.m_WithoutSpecification,
                FilterReportEmploymentPlannedSortTypeItem.m_Period,
                FilterReportEmploymentPlannedSortTypeItem.m_Period_Project};
        
        private FilterReportEmploymentPlannedSortTypeItem(FilterReportEmploymentPlannedSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem WithoutSpecification {
            get {
                return FilterReportEmploymentPlannedSortTypeItem.m_WithoutSpecification;
            }
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem Period {
            get {
                return FilterReportEmploymentPlannedSortTypeItem.m_Period;
            }
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem Period_Project {
            get {
                return FilterReportEmploymentPlannedSortTypeItem.m_Period_Project;
            }
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem[] Values {
            get {
                return FilterReportEmploymentPlannedSortTypeItem.values;
            }
        }
        
        public FilterReportEmploymentPlannedSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem GetItem(FilterReportEmploymentPlannedSortType nValue) {
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FilterReportEmploymentPlannedSortTypeItem[] GetItems(FilterReportEmploymentPlannedSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FilterReportEmploymentPlannedSortTypeItem[] result = new FilterReportEmploymentPlannedSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FilterReportEmploymentPlannedSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FilterReportEmploymentPlannedSortType nValue) {
            return FilterReportEmploymentPlannedSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FilterReportEmploymentPlannedSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FilterReportEmploymentPlannedSortType nValue) {
            return FilterReportEmploymentPlannedSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FilterReportEmploymentPlannedSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FilterReportEmploymentPlannedSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FilterReportEmploymentPlannedSortTypeItem value = ((FilterReportEmploymentPlannedSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип события папки
    public enum FolderHistoryEvents : short {
        
        /// Ожидание закрытия
        WaitingToClose = 1,
        
        /// Закрытие
        Closing = 2,
        
        /// Открытие
        Opening = 3,
        
        /// Замороживание
        Frozing = 4,
        
        /// Переход из пилотной стадии
        UpgradeFromPilot = 6,
        
        /// Изменение даты блокирования списаний
        BlockDateChanging = 7,
        
        /// Установление связи с порожденной активностью
        LinkToFollowing = 8,
        
        /// Разрыв связи с порожденной активностью
        UnlinkToFollowing = 9,
        
        /// Создание
        Creating = 10,
        
        /// Изменение данных по направлениям
        DirectionInfoChanging = 11,
        
        /// Блокировка списаний на папку
        IsLockedSetToTrue = 12,
        
        /// Разрешение списаний на папку
        IsLockedSetToFalse = 13,
    }
    
    public class FolderHistoryEventsItem {
        
        private FolderHistoryEvents m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderHistoryEventsItem m_WaitingToClose = new FolderHistoryEventsItem(FolderHistoryEvents.WaitingToClose, "WaitingToClose", "Ожидание закрытия");
        
        private static FolderHistoryEventsItem m_Closing = new FolderHistoryEventsItem(FolderHistoryEvents.Closing, "Closing", "Закрытие");
        
        private static FolderHistoryEventsItem m_Opening = new FolderHistoryEventsItem(FolderHistoryEvents.Opening, "Opening", "Открытие");
        
        private static FolderHistoryEventsItem m_Frozing = new FolderHistoryEventsItem(FolderHistoryEvents.Frozing, "Frozing", "Замороживание");
        
        private static FolderHistoryEventsItem m_UpgradeFromPilot = new FolderHistoryEventsItem(FolderHistoryEvents.UpgradeFromPilot, "UpgradeFromPilot", "Переход из пилотной стадии");
        
        private static FolderHistoryEventsItem m_BlockDateChanging = new FolderHistoryEventsItem(FolderHistoryEvents.BlockDateChanging, "BlockDateChanging", "Изменение даты блокирования списаний");
        
        private static FolderHistoryEventsItem m_LinkToFollowing = new FolderHistoryEventsItem(FolderHistoryEvents.LinkToFollowing, "LinkToFollowing", "Установление связи с порожденной активностью");
        
        private static FolderHistoryEventsItem m_UnlinkToFollowing = new FolderHistoryEventsItem(FolderHistoryEvents.UnlinkToFollowing, "UnlinkToFollowing", "Разрыв связи с порожденной активностью");
        
        private static FolderHistoryEventsItem m_Creating = new FolderHistoryEventsItem(FolderHistoryEvents.Creating, "Creating", "Создание");
        
        private static FolderHistoryEventsItem m_DirectionInfoChanging = new FolderHistoryEventsItem(FolderHistoryEvents.DirectionInfoChanging, "DirectionInfoChanging", "Изменение данных по направлениям");
        
        private static FolderHistoryEventsItem m_IsLockedSetToTrue = new FolderHistoryEventsItem(FolderHistoryEvents.IsLockedSetToTrue, "IsLockedSetToTrue", "Блокировка списаний на папку");
        
        private static FolderHistoryEventsItem m_IsLockedSetToFalse = new FolderHistoryEventsItem(FolderHistoryEvents.IsLockedSetToFalse, "IsLockedSetToFalse", "Разрешение списаний на папку");
        
        private static FolderHistoryEventsItem[] values = new FolderHistoryEventsItem[] {
                FolderHistoryEventsItem.m_WaitingToClose,
                FolderHistoryEventsItem.m_Closing,
                FolderHistoryEventsItem.m_Opening,
                FolderHistoryEventsItem.m_Frozing,
                FolderHistoryEventsItem.m_UpgradeFromPilot,
                FolderHistoryEventsItem.m_BlockDateChanging,
                FolderHistoryEventsItem.m_LinkToFollowing,
                FolderHistoryEventsItem.m_UnlinkToFollowing,
                FolderHistoryEventsItem.m_Creating,
                FolderHistoryEventsItem.m_DirectionInfoChanging,
                FolderHistoryEventsItem.m_IsLockedSetToTrue,
                FolderHistoryEventsItem.m_IsLockedSetToFalse};
        
        private FolderHistoryEventsItem(FolderHistoryEvents value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderHistoryEventsItem WaitingToClose {
            get {
                return FolderHistoryEventsItem.m_WaitingToClose;
            }
        }
        
        public static FolderHistoryEventsItem Closing {
            get {
                return FolderHistoryEventsItem.m_Closing;
            }
        }
        
        public static FolderHistoryEventsItem Opening {
            get {
                return FolderHistoryEventsItem.m_Opening;
            }
        }
        
        public static FolderHistoryEventsItem Frozing {
            get {
                return FolderHistoryEventsItem.m_Frozing;
            }
        }
        
        public static FolderHistoryEventsItem UpgradeFromPilot {
            get {
                return FolderHistoryEventsItem.m_UpgradeFromPilot;
            }
        }
        
        public static FolderHistoryEventsItem BlockDateChanging {
            get {
                return FolderHistoryEventsItem.m_BlockDateChanging;
            }
        }
        
        public static FolderHistoryEventsItem LinkToFollowing {
            get {
                return FolderHistoryEventsItem.m_LinkToFollowing;
            }
        }
        
        public static FolderHistoryEventsItem UnlinkToFollowing {
            get {
                return FolderHistoryEventsItem.m_UnlinkToFollowing;
            }
        }
        
        public static FolderHistoryEventsItem Creating {
            get {
                return FolderHistoryEventsItem.m_Creating;
            }
        }
        
        public static FolderHistoryEventsItem DirectionInfoChanging {
            get {
                return FolderHistoryEventsItem.m_DirectionInfoChanging;
            }
        }
        
        public static FolderHistoryEventsItem IsLockedSetToTrue {
            get {
                return FolderHistoryEventsItem.m_IsLockedSetToTrue;
            }
        }
        
        public static FolderHistoryEventsItem IsLockedSetToFalse {
            get {
                return FolderHistoryEventsItem.m_IsLockedSetToFalse;
            }
        }
        
        public static FolderHistoryEventsItem[] Values {
            get {
                return FolderHistoryEventsItem.values;
            }
        }
        
        public FolderHistoryEvents Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderHistoryEventsItem GetItem(FolderHistoryEvents nValue) {
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderHistoryEventsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderHistoryEventsItem[] GetItems(FolderHistoryEvents nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderHistoryEventsItem[] result = new FolderHistoryEventsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderHistoryEvents nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderHistoryEvents nValue) {
            return FolderHistoryEventsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderHistoryEvents nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderHistoryEvents nValue) {
            return FolderHistoryEventsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderHistoryEvents nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderHistoryEventsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderHistoryEventsItem value = ((FolderHistoryEventsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Привилегии для папки
    [Flags()]
    public enum FolderPrivileges {
        
        /// Управление инцидентами
        ManageIncidents = 1,
        
        /// Управление составом участников инцидента
        ManageIncidentParticipants = 2,
        
        /// Управление чужими списаниями
        EditIncidentTimeSpent = 4,
        
        /// Редактирование реквизитов проектов
        ChangeFolder = 64,
        
        /// Управление каталогами
        ManageCatalog = 128,
        
        /// Создание списания на проект
        SpentTimeByProject = 256,
        
        /// Управление проектной командой
        ManageTeam = 512,
        
        /// Закрытие активности
        CloseFolder = 1024,
        
        /// Разрешение списания на папку с неоднозначным определением направления
        TimeLossOnUnspecifiedDirection = 2048,
    }
    
    public class FolderPrivilegesItem {
        
        private FolderPrivileges m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderPrivilegesItem m_ManageIncidents = new FolderPrivilegesItem(FolderPrivileges.ManageIncidents, "ManageIncidents", "Управление инцидентами");
        
        private static FolderPrivilegesItem m_ManageIncidentParticipants = new FolderPrivilegesItem(FolderPrivileges.ManageIncidentParticipants, "ManageIncidentParticipants", "Управление составом участников инцидента");
        
        private static FolderPrivilegesItem m_EditIncidentTimeSpent = new FolderPrivilegesItem(FolderPrivileges.EditIncidentTimeSpent, "EditIncidentTimeSpent", "Управление чужими списаниями");
        
        private static FolderPrivilegesItem m_ChangeFolder = new FolderPrivilegesItem(FolderPrivileges.ChangeFolder, "ChangeFolder", "Редактирование реквизитов проектов");
        
        private static FolderPrivilegesItem m_ManageCatalog = new FolderPrivilegesItem(FolderPrivileges.ManageCatalog, "ManageCatalog", "Управление каталогами");
        
        private static FolderPrivilegesItem m_SpentTimeByProject = new FolderPrivilegesItem(FolderPrivileges.SpentTimeByProject, "SpentTimeByProject", "Создание списания на проект");
        
        private static FolderPrivilegesItem m_ManageTeam = new FolderPrivilegesItem(FolderPrivileges.ManageTeam, "ManageTeam", "Управление проектной командой");
        
        private static FolderPrivilegesItem m_CloseFolder = new FolderPrivilegesItem(FolderPrivileges.CloseFolder, "CloseFolder", "Закрытие активности");
        
        private static FolderPrivilegesItem m_TimeLossOnUnspecifiedDirection = new FolderPrivilegesItem(FolderPrivileges.TimeLossOnUnspecifiedDirection, "TimeLossOnUnspecifiedDirection", "Разрешение списания на папку с неоднозначным определением направления");
        
        private static FolderPrivilegesItem[] values = new FolderPrivilegesItem[] {
                FolderPrivilegesItem.m_ManageIncidents,
                FolderPrivilegesItem.m_ManageIncidentParticipants,
                FolderPrivilegesItem.m_EditIncidentTimeSpent,
                FolderPrivilegesItem.m_ChangeFolder,
                FolderPrivilegesItem.m_ManageCatalog,
                FolderPrivilegesItem.m_SpentTimeByProject,
                FolderPrivilegesItem.m_ManageTeam,
                FolderPrivilegesItem.m_CloseFolder,
                FolderPrivilegesItem.m_TimeLossOnUnspecifiedDirection};
        
        private FolderPrivilegesItem(FolderPrivileges value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderPrivilegesItem ManageIncidents {
            get {
                return FolderPrivilegesItem.m_ManageIncidents;
            }
        }
        
        public static FolderPrivilegesItem ManageIncidentParticipants {
            get {
                return FolderPrivilegesItem.m_ManageIncidentParticipants;
            }
        }
        
        public static FolderPrivilegesItem EditIncidentTimeSpent {
            get {
                return FolderPrivilegesItem.m_EditIncidentTimeSpent;
            }
        }
        
        public static FolderPrivilegesItem ChangeFolder {
            get {
                return FolderPrivilegesItem.m_ChangeFolder;
            }
        }
        
        public static FolderPrivilegesItem ManageCatalog {
            get {
                return FolderPrivilegesItem.m_ManageCatalog;
            }
        }
        
        public static FolderPrivilegesItem SpentTimeByProject {
            get {
                return FolderPrivilegesItem.m_SpentTimeByProject;
            }
        }
        
        public static FolderPrivilegesItem ManageTeam {
            get {
                return FolderPrivilegesItem.m_ManageTeam;
            }
        }
        
        public static FolderPrivilegesItem CloseFolder {
            get {
                return FolderPrivilegesItem.m_CloseFolder;
            }
        }
        
        public static FolderPrivilegesItem TimeLossOnUnspecifiedDirection {
            get {
                return FolderPrivilegesItem.m_TimeLossOnUnspecifiedDirection;
            }
        }
        
        public static FolderPrivilegesItem[] Values {
            get {
                return FolderPrivilegesItem.values;
            }
        }
        
        public FolderPrivileges Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderPrivilegesItem GetItem(FolderPrivileges nValue) {
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderPrivilegesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderPrivilegesItem[] GetItems(FolderPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderPrivilegesItem[] result = new FolderPrivilegesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderPrivileges nValue) {
            return FolderPrivilegesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderPrivileges nValue) {
            return FolderPrivilegesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderPrivilegesItem value = ((FolderPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Состояние папки
    public enum FolderStates : short {
        
        /// Открыто
        Open = 1,
        
        /// Ожидание закрытия
        WaitingToClose = 2,
        
        /// Закрыто
        Closed = 4,
        
        /// Заморожено
        Frozen = 8,
    }
    
    public class FolderStatesItem {
        
        private FolderStates m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderStatesItem m_Open = new FolderStatesItem(FolderStates.Open, "Open", "Открыто");
        
        private static FolderStatesItem m_WaitingToClose = new FolderStatesItem(FolderStates.WaitingToClose, "WaitingToClose", "Ожидание закрытия");
        
        private static FolderStatesItem m_Closed = new FolderStatesItem(FolderStates.Closed, "Closed", "Закрыто");
        
        private static FolderStatesItem m_Frozen = new FolderStatesItem(FolderStates.Frozen, "Frozen", "Заморожено");
        
        private static FolderStatesItem[] values = new FolderStatesItem[] {
                FolderStatesItem.m_Open,
                FolderStatesItem.m_WaitingToClose,
                FolderStatesItem.m_Closed,
                FolderStatesItem.m_Frozen};
        
        private FolderStatesItem(FolderStates value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderStatesItem Open {
            get {
                return FolderStatesItem.m_Open;
            }
        }
        
        public static FolderStatesItem WaitingToClose {
            get {
                return FolderStatesItem.m_WaitingToClose;
            }
        }
        
        public static FolderStatesItem Closed {
            get {
                return FolderStatesItem.m_Closed;
            }
        }
        
        public static FolderStatesItem Frozen {
            get {
                return FolderStatesItem.m_Frozen;
            }
        }
        
        public static FolderStatesItem[] Values {
            get {
                return FolderStatesItem.values;
            }
        }
        
        public FolderStates Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderStatesItem GetItem(FolderStates nValue) {
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderStatesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderStatesItem[] GetItems(FolderStates nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderStatesItem[] result = new FolderStatesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderStates nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderStates nValue) {
            return FolderStatesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderStates nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderStates nValue) {
            return FolderStatesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderStates nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderStatesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesItem value = ((FolderStatesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Состояние папки flags
    [Flags()]
    public enum FolderStatesFlags : short {
        
        /// Открыто
        Open = 1,
        
        /// Ожидание закрытия
        WaitingToClose = 2,
        
        /// Закрыто
        Closed = 4,
        
        /// Заморожено
        Frozen = 8,
    }
    
    public class FolderStatesFlagsItem {
        
        private FolderStatesFlags m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderStatesFlagsItem m_Open = new FolderStatesFlagsItem(FolderStatesFlags.Open, "Open", "Открыто");
        
        private static FolderStatesFlagsItem m_WaitingToClose = new FolderStatesFlagsItem(FolderStatesFlags.WaitingToClose, "WaitingToClose", "Ожидание закрытия");
        
        private static FolderStatesFlagsItem m_Closed = new FolderStatesFlagsItem(FolderStatesFlags.Closed, "Closed", "Закрыто");
        
        private static FolderStatesFlagsItem m_Frozen = new FolderStatesFlagsItem(FolderStatesFlags.Frozen, "Frozen", "Заморожено");
        
        private static FolderStatesFlagsItem[] values = new FolderStatesFlagsItem[] {
                FolderStatesFlagsItem.m_Open,
                FolderStatesFlagsItem.m_WaitingToClose,
                FolderStatesFlagsItem.m_Closed,
                FolderStatesFlagsItem.m_Frozen};
        
        private FolderStatesFlagsItem(FolderStatesFlags value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderStatesFlagsItem Open {
            get {
                return FolderStatesFlagsItem.m_Open;
            }
        }
        
        public static FolderStatesFlagsItem WaitingToClose {
            get {
                return FolderStatesFlagsItem.m_WaitingToClose;
            }
        }
        
        public static FolderStatesFlagsItem Closed {
            get {
                return FolderStatesFlagsItem.m_Closed;
            }
        }
        
        public static FolderStatesFlagsItem Frozen {
            get {
                return FolderStatesFlagsItem.m_Frozen;
            }
        }
        
        public static FolderStatesFlagsItem[] Values {
            get {
                return FolderStatesFlagsItem.values;
            }
        }
        
        public FolderStatesFlags Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderStatesFlagsItem GetItem(FolderStatesFlags nValue) {
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderStatesFlagsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderStatesFlagsItem[] GetItems(FolderStatesFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderStatesFlagsItem[] result = new FolderStatesFlagsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderStatesFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderStatesFlags nValue) {
            return FolderStatesFlagsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderStatesFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderStatesFlags nValue) {
            return FolderStatesFlagsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderStatesFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderStatesFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderStatesFlagsItem value = ((FolderStatesFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип папки enum
    public enum FolderTypeEnum : short {
        
        /// Проект
        Project = 1,
        
        /// Тендер
        Tender = 4,
        
        /// Пресейл
        Presale = 8,
        
        /// Каталог
        Directory = 16,
    }
    
    public class FolderTypeEnumItem {
        
        private FolderTypeEnum m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderTypeEnumItem m_Project = new FolderTypeEnumItem(FolderTypeEnum.Project, "Project", "Проект");
        
        private static FolderTypeEnumItem m_Tender = new FolderTypeEnumItem(FolderTypeEnum.Tender, "Tender", "Тендер");
        
        private static FolderTypeEnumItem m_Presale = new FolderTypeEnumItem(FolderTypeEnum.Presale, "Presale", "Пресейл");
        
        private static FolderTypeEnumItem m_Directory = new FolderTypeEnumItem(FolderTypeEnum.Directory, "Directory", "Каталог");
        
        private static FolderTypeEnumItem[] values = new FolderTypeEnumItem[] {
                FolderTypeEnumItem.m_Project,
                FolderTypeEnumItem.m_Tender,
                FolderTypeEnumItem.m_Presale,
                FolderTypeEnumItem.m_Directory};
        
        private FolderTypeEnumItem(FolderTypeEnum value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderTypeEnumItem Project {
            get {
                return FolderTypeEnumItem.m_Project;
            }
        }
        
        public static FolderTypeEnumItem Tender {
            get {
                return FolderTypeEnumItem.m_Tender;
            }
        }
        
        public static FolderTypeEnumItem Presale {
            get {
                return FolderTypeEnumItem.m_Presale;
            }
        }
        
        public static FolderTypeEnumItem Directory {
            get {
                return FolderTypeEnumItem.m_Directory;
            }
        }
        
        public static FolderTypeEnumItem[] Values {
            get {
                return FolderTypeEnumItem.values;
            }
        }
        
        public FolderTypeEnum Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderTypeEnumItem GetItem(FolderTypeEnum nValue) {
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderTypeEnumItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderTypeEnumItem[] GetItems(FolderTypeEnum nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderTypeEnumItem[] result = new FolderTypeEnumItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderTypeEnum nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderTypeEnum nValue) {
            return FolderTypeEnumItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderTypeEnum nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderTypeEnum nValue) {
            return FolderTypeEnumItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderTypeEnum nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderTypeEnumItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeEnumItem value = ((FolderTypeEnumItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип папки flags
    [Flags()]
    public enum FolderTypeFlags : short {
        
        /// Проект
        Project = 1,
        
        /// Тендер
        Tender = 4,
        
        /// Пресейл
        Presale = 8,
        
        /// Каталог
        Directory = 16,
    }
    
    public class FolderTypeFlagsItem {
        
        private FolderTypeFlags m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static FolderTypeFlagsItem m_Project = new FolderTypeFlagsItem(FolderTypeFlags.Project, "Project", "Проект");
        
        private static FolderTypeFlagsItem m_Tender = new FolderTypeFlagsItem(FolderTypeFlags.Tender, "Tender", "Тендер");
        
        private static FolderTypeFlagsItem m_Presale = new FolderTypeFlagsItem(FolderTypeFlags.Presale, "Presale", "Пресейл");
        
        private static FolderTypeFlagsItem m_Directory = new FolderTypeFlagsItem(FolderTypeFlags.Directory, "Directory", "Каталог");
        
        private static FolderTypeFlagsItem[] values = new FolderTypeFlagsItem[] {
                FolderTypeFlagsItem.m_Project,
                FolderTypeFlagsItem.m_Tender,
                FolderTypeFlagsItem.m_Presale,
                FolderTypeFlagsItem.m_Directory};
        
        private FolderTypeFlagsItem(FolderTypeFlags value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static FolderTypeFlagsItem Project {
            get {
                return FolderTypeFlagsItem.m_Project;
            }
        }
        
        public static FolderTypeFlagsItem Tender {
            get {
                return FolderTypeFlagsItem.m_Tender;
            }
        }
        
        public static FolderTypeFlagsItem Presale {
            get {
                return FolderTypeFlagsItem.m_Presale;
            }
        }
        
        public static FolderTypeFlagsItem Directory {
            get {
                return FolderTypeFlagsItem.m_Directory;
            }
        }
        
        public static FolderTypeFlagsItem[] Values {
            get {
                return FolderTypeFlagsItem.values;
            }
        }
        
        public FolderTypeFlags Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static FolderTypeFlagsItem GetItem(FolderTypeFlags nValue) {
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderTypeFlagsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static FolderTypeFlagsItem[] GetItems(FolderTypeFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            FolderTypeFlagsItem[] result = new FolderTypeFlagsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(FolderTypeFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(FolderTypeFlags nValue) {
            return FolderTypeFlagsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(FolderTypeFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(FolderTypeFlags nValue) {
            return FolderTypeFlagsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(FolderTypeFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = FolderTypeFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                FolderTypeFlagsItem value = ((FolderTypeFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип банковской гарантии
    public enum GuaranteeType : short {
        
        /// Есть
        Present = 1,
        
        /// Нет
        Absent = 2,
    }
    
    public class GuaranteeTypeItem {
        
        private GuaranteeType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static GuaranteeTypeItem m_Present = new GuaranteeTypeItem(GuaranteeType.Present, "Present", "Есть");
        
        private static GuaranteeTypeItem m_Absent = new GuaranteeTypeItem(GuaranteeType.Absent, "Absent", "Нет");
        
        private static GuaranteeTypeItem[] values = new GuaranteeTypeItem[] {
                GuaranteeTypeItem.m_Present,
                GuaranteeTypeItem.m_Absent};
        
        private GuaranteeTypeItem(GuaranteeType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static GuaranteeTypeItem Present {
            get {
                return GuaranteeTypeItem.m_Present;
            }
        }
        
        public static GuaranteeTypeItem Absent {
            get {
                return GuaranteeTypeItem.m_Absent;
            }
        }
        
        public static GuaranteeTypeItem[] Values {
            get {
                return GuaranteeTypeItem.values;
            }
        }
        
        public GuaranteeType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static GuaranteeTypeItem GetItem(GuaranteeType nValue) {
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static GuaranteeTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static GuaranteeTypeItem[] GetItems(GuaranteeType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            GuaranteeTypeItem[] result = new GuaranteeTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(GuaranteeType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(GuaranteeType nValue) {
            return GuaranteeTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(GuaranteeType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(GuaranteeType nValue) {
            return GuaranteeTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(GuaranteeType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = GuaranteeTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                GuaranteeTypeItem value = ((GuaranteeTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Поведение IncidentFinder
    public enum IncidentFinderBehavior : short {
        
        /// Открыть просмотр
        OpenView = 1,
        
        /// Открыть редактор
        OpenEditor = 2,
        
        /// Открыть в дереве
        OpenInTree = 3,
    }
    
    public class IncidentFinderBehaviorItem {
        
        private IncidentFinderBehavior m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentFinderBehaviorItem m_OpenView = new IncidentFinderBehaviorItem(IncidentFinderBehavior.OpenView, "OpenView", "Открыть просмотр");
        
        private static IncidentFinderBehaviorItem m_OpenEditor = new IncidentFinderBehaviorItem(IncidentFinderBehavior.OpenEditor, "OpenEditor", "Открыть редактор");
        
        private static IncidentFinderBehaviorItem m_OpenInTree = new IncidentFinderBehaviorItem(IncidentFinderBehavior.OpenInTree, "OpenInTree", "Открыть в дереве");
        
        private static IncidentFinderBehaviorItem[] values = new IncidentFinderBehaviorItem[] {
                IncidentFinderBehaviorItem.m_OpenView,
                IncidentFinderBehaviorItem.m_OpenEditor,
                IncidentFinderBehaviorItem.m_OpenInTree};
        
        private IncidentFinderBehaviorItem(IncidentFinderBehavior value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentFinderBehaviorItem OpenView {
            get {
                return IncidentFinderBehaviorItem.m_OpenView;
            }
        }
        
        public static IncidentFinderBehaviorItem OpenEditor {
            get {
                return IncidentFinderBehaviorItem.m_OpenEditor;
            }
        }
        
        public static IncidentFinderBehaviorItem OpenInTree {
            get {
                return IncidentFinderBehaviorItem.m_OpenInTree;
            }
        }
        
        public static IncidentFinderBehaviorItem[] Values {
            get {
                return IncidentFinderBehaviorItem.values;
            }
        }
        
        public IncidentFinderBehavior Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentFinderBehaviorItem GetItem(IncidentFinderBehavior nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentFinderBehaviorItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentFinderBehaviorItem[] GetItems(IncidentFinderBehavior nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentFinderBehaviorItem[] result = new IncidentFinderBehaviorItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentFinderBehavior nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentFinderBehavior nValue) {
            return IncidentFinderBehaviorItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentFinderBehavior nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentFinderBehavior nValue) {
            return IncidentFinderBehaviorItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentFinderBehavior nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentFinderBehaviorItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentFinderBehaviorItem value = ((IncidentFinderBehaviorItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Приоритет инцидента
    public enum IncidentPriority : short {
        
        /// Высокий
        HIGH = 1,
        
        /// Средний
        NORMAL = 2,
        
        /// Низкий
        LOW = 3,
    }
    
    public class IncidentPriorityItem {
        
        private IncidentPriority m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentPriorityItem m_HIGH = new IncidentPriorityItem(IncidentPriority.HIGH, "HIGH", "Высокий");
        
        private static IncidentPriorityItem m_NORMAL = new IncidentPriorityItem(IncidentPriority.NORMAL, "NORMAL", "Средний");
        
        private static IncidentPriorityItem m_LOW = new IncidentPriorityItem(IncidentPriority.LOW, "LOW", "Низкий");
        
        private static IncidentPriorityItem[] values = new IncidentPriorityItem[] {
                IncidentPriorityItem.m_HIGH,
                IncidentPriorityItem.m_NORMAL,
                IncidentPriorityItem.m_LOW};
        
        private IncidentPriorityItem(IncidentPriority value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentPriorityItem HIGH {
            get {
                return IncidentPriorityItem.m_HIGH;
            }
        }
        
        public static IncidentPriorityItem NORMAL {
            get {
                return IncidentPriorityItem.m_NORMAL;
            }
        }
        
        public static IncidentPriorityItem LOW {
            get {
                return IncidentPriorityItem.m_LOW;
            }
        }
        
        public static IncidentPriorityItem[] Values {
            get {
                return IncidentPriorityItem.values;
            }
        }
        
        public IncidentPriority Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentPriorityItem GetItem(IncidentPriority nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentPriorityItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentPriorityItem[] GetItems(IncidentPriority nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentPriorityItem[] result = new IncidentPriorityItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentPriority nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentPriority nValue) {
            return IncidentPriorityItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentPriority nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentPriority nValue) {
            return IncidentPriorityItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentPriority nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentPriorityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentPriorityItem value = ((IncidentPriorityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Категория состояния инцидента
    public enum IncidentStateCat : short {
        
        /// В работе
        Open = 1,
        
        /// На проверке
        OnCheck = 2,
        
        /// Работа окончена
        Finished = 3,
        
        /// Заморожен
        Frozen = 4,
        
        /// Отклонен
        Declined = 5,
    }
    
    public class IncidentStateCatItem {
        
        private IncidentStateCat m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentStateCatItem m_Open = new IncidentStateCatItem(IncidentStateCat.Open, "Open", "В работе");
        
        private static IncidentStateCatItem m_OnCheck = new IncidentStateCatItem(IncidentStateCat.OnCheck, "OnCheck", "На проверке");
        
        private static IncidentStateCatItem m_Finished = new IncidentStateCatItem(IncidentStateCat.Finished, "Finished", "Работа окончена");
        
        private static IncidentStateCatItem m_Frozen = new IncidentStateCatItem(IncidentStateCat.Frozen, "Frozen", "Заморожен");
        
        private static IncidentStateCatItem m_Declined = new IncidentStateCatItem(IncidentStateCat.Declined, "Declined", "Отклонен");
        
        private static IncidentStateCatItem[] values = new IncidentStateCatItem[] {
                IncidentStateCatItem.m_Open,
                IncidentStateCatItem.m_OnCheck,
                IncidentStateCatItem.m_Finished,
                IncidentStateCatItem.m_Frozen,
                IncidentStateCatItem.m_Declined};
        
        private IncidentStateCatItem(IncidentStateCat value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentStateCatItem Open {
            get {
                return IncidentStateCatItem.m_Open;
            }
        }
        
        public static IncidentStateCatItem OnCheck {
            get {
                return IncidentStateCatItem.m_OnCheck;
            }
        }
        
        public static IncidentStateCatItem Finished {
            get {
                return IncidentStateCatItem.m_Finished;
            }
        }
        
        public static IncidentStateCatItem Frozen {
            get {
                return IncidentStateCatItem.m_Frozen;
            }
        }
        
        public static IncidentStateCatItem Declined {
            get {
                return IncidentStateCatItem.m_Declined;
            }
        }
        
        public static IncidentStateCatItem[] Values {
            get {
                return IncidentStateCatItem.values;
            }
        }
        
        public IncidentStateCat Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentStateCatItem GetItem(IncidentStateCat nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateCatItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateCatItem[] GetItems(IncidentStateCat nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentStateCatItem[] result = new IncidentStateCatItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentStateCat nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentStateCat nValue) {
            return IncidentStateCatItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentStateCat nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentStateCat nValue) {
            return IncidentStateCatItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentStateCat nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateCatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCatItem value = ((IncidentStateCatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Категория состояния
    [Flags()]
    public enum IncidentStateCategoryFlags : short {
        
        /// В работе
        Open = 1,
        
        /// На проверке
        OnCheck = 2,
        
        /// Работа окончена
        Finished = 4,
        
        /// Заморожен
        Frozen = 8,
        
        /// Отклонен
        Declined = 16,
    }
    
    public class IncidentStateCategoryFlagsItem {
        
        private IncidentStateCategoryFlags m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentStateCategoryFlagsItem m_Open = new IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags.Open, "Open", "В работе");
        
        private static IncidentStateCategoryFlagsItem m_OnCheck = new IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags.OnCheck, "OnCheck", "На проверке");
        
        private static IncidentStateCategoryFlagsItem m_Finished = new IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags.Finished, "Finished", "Работа окончена");
        
        private static IncidentStateCategoryFlagsItem m_Frozen = new IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags.Frozen, "Frozen", "Заморожен");
        
        private static IncidentStateCategoryFlagsItem m_Declined = new IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags.Declined, "Declined", "Отклонен");
        
        private static IncidentStateCategoryFlagsItem[] values = new IncidentStateCategoryFlagsItem[] {
                IncidentStateCategoryFlagsItem.m_Open,
                IncidentStateCategoryFlagsItem.m_OnCheck,
                IncidentStateCategoryFlagsItem.m_Finished,
                IncidentStateCategoryFlagsItem.m_Frozen,
                IncidentStateCategoryFlagsItem.m_Declined};
        
        private IncidentStateCategoryFlagsItem(IncidentStateCategoryFlags value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentStateCategoryFlagsItem Open {
            get {
                return IncidentStateCategoryFlagsItem.m_Open;
            }
        }
        
        public static IncidentStateCategoryFlagsItem OnCheck {
            get {
                return IncidentStateCategoryFlagsItem.m_OnCheck;
            }
        }
        
        public static IncidentStateCategoryFlagsItem Finished {
            get {
                return IncidentStateCategoryFlagsItem.m_Finished;
            }
        }
        
        public static IncidentStateCategoryFlagsItem Frozen {
            get {
                return IncidentStateCategoryFlagsItem.m_Frozen;
            }
        }
        
        public static IncidentStateCategoryFlagsItem Declined {
            get {
                return IncidentStateCategoryFlagsItem.m_Declined;
            }
        }
        
        public static IncidentStateCategoryFlagsItem[] Values {
            get {
                return IncidentStateCategoryFlagsItem.values;
            }
        }
        
        public IncidentStateCategoryFlags Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentStateCategoryFlagsItem GetItem(IncidentStateCategoryFlags nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateCategoryFlagsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateCategoryFlagsItem[] GetItems(IncidentStateCategoryFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentStateCategoryFlagsItem[] result = new IncidentStateCategoryFlagsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentStateCategoryFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentStateCategoryFlags nValue) {
            return IncidentStateCategoryFlagsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentStateCategoryFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentStateCategoryFlags nValue) {
            return IncidentStateCategoryFlagsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentStateCategoryFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateCategoryFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateCategoryFlagsItem value = ((IncidentStateCategoryFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Детализация состояний инцидента
    public enum IncidentStateDetalization : short {
        
        /// по всем состояниям
        AllStates = 0,
        
        /// по открытию и закрытию
        OpenAndClosedStates = 1,
        
        /// без детализации (только открытые)
        OffDetalizationOpenStatesOnly = 2,
    }
    
    public class IncidentStateDetalizationItem {
        
        private IncidentStateDetalization m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentStateDetalizationItem m_AllStates = new IncidentStateDetalizationItem(IncidentStateDetalization.AllStates, "AllStates", "по всем состояниям");
        
        private static IncidentStateDetalizationItem m_OpenAndClosedStates = new IncidentStateDetalizationItem(IncidentStateDetalization.OpenAndClosedStates, "OpenAndClosedStates", "по открытию и закрытию");
        
        private static IncidentStateDetalizationItem m_OffDetalizationOpenStatesOnly = new IncidentStateDetalizationItem(IncidentStateDetalization.OffDetalizationOpenStatesOnly, "OffDetalizationOpenStatesOnly", "без детализации (только открытые)");
        
        private static IncidentStateDetalizationItem[] values = new IncidentStateDetalizationItem[] {
                IncidentStateDetalizationItem.m_AllStates,
                IncidentStateDetalizationItem.m_OpenAndClosedStates,
                IncidentStateDetalizationItem.m_OffDetalizationOpenStatesOnly};
        
        private IncidentStateDetalizationItem(IncidentStateDetalization value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentStateDetalizationItem AllStates {
            get {
                return IncidentStateDetalizationItem.m_AllStates;
            }
        }
        
        public static IncidentStateDetalizationItem OpenAndClosedStates {
            get {
                return IncidentStateDetalizationItem.m_OpenAndClosedStates;
            }
        }
        
        public static IncidentStateDetalizationItem OffDetalizationOpenStatesOnly {
            get {
                return IncidentStateDetalizationItem.m_OffDetalizationOpenStatesOnly;
            }
        }
        
        public static IncidentStateDetalizationItem[] Values {
            get {
                return IncidentStateDetalizationItem.values;
            }
        }
        
        public IncidentStateDetalization Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentStateDetalizationItem GetItem(IncidentStateDetalization nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateDetalizationItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentStateDetalizationItem[] GetItems(IncidentStateDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentStateDetalizationItem[] result = new IncidentStateDetalizationItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentStateDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentStateDetalization nValue) {
            return IncidentStateDetalizationItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentStateDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentStateDetalization nValue) {
            return IncidentStateDetalizationItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentStateDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentStateDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentStateDetalizationItem value = ((IncidentStateDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Режимы отображения инцидентов
    public enum IncidentViewModes : short {
        
        /// Все инциденты
        All = 1,
        
        /// Открытые
        Open = 2,
        
        /// Не закрытые
        NotClosed = 3,
        
        /// Закрытые
        Closed = 4,
        
        /// Мои инциденты
        Mine = 5,
    }
    
    public class IncidentViewModesItem {
        
        private IncidentViewModes m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IncidentViewModesItem m_All = new IncidentViewModesItem(IncidentViewModes.All, "All", "Все инциденты");
        
        private static IncidentViewModesItem m_Open = new IncidentViewModesItem(IncidentViewModes.Open, "Open", "Открытые");
        
        private static IncidentViewModesItem m_NotClosed = new IncidentViewModesItem(IncidentViewModes.NotClosed, "NotClosed", "Не закрытые");
        
        private static IncidentViewModesItem m_Closed = new IncidentViewModesItem(IncidentViewModes.Closed, "Closed", "Закрытые");
        
        private static IncidentViewModesItem m_Mine = new IncidentViewModesItem(IncidentViewModes.Mine, "Mine", "Мои инциденты");
        
        private static IncidentViewModesItem[] values = new IncidentViewModesItem[] {
                IncidentViewModesItem.m_All,
                IncidentViewModesItem.m_Open,
                IncidentViewModesItem.m_NotClosed,
                IncidentViewModesItem.m_Closed,
                IncidentViewModesItem.m_Mine};
        
        private IncidentViewModesItem(IncidentViewModes value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IncidentViewModesItem All {
            get {
                return IncidentViewModesItem.m_All;
            }
        }
        
        public static IncidentViewModesItem Open {
            get {
                return IncidentViewModesItem.m_Open;
            }
        }
        
        public static IncidentViewModesItem NotClosed {
            get {
                return IncidentViewModesItem.m_NotClosed;
            }
        }
        
        public static IncidentViewModesItem Closed {
            get {
                return IncidentViewModesItem.m_Closed;
            }
        }
        
        public static IncidentViewModesItem Mine {
            get {
                return IncidentViewModesItem.m_Mine;
            }
        }
        
        public static IncidentViewModesItem[] Values {
            get {
                return IncidentViewModesItem.values;
            }
        }
        
        public IncidentViewModes Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IncidentViewModesItem GetItem(IncidentViewModes nValue) {
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentViewModesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IncidentViewModesItem[] GetItems(IncidentViewModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IncidentViewModesItem[] result = new IncidentViewModesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IncidentViewModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IncidentViewModes nValue) {
            return IncidentViewModesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IncidentViewModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IncidentViewModes nValue) {
            return IncidentViewModesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IncidentViewModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IncidentViewModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IncidentViewModesItem value = ((IncidentViewModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Происхождение источника информации
    public enum InfoSourceOrigin : short {
        
        /// Внешний
        Outside = 1,
        
        /// Внутренний
        Inside = 2,
        
        /// Сотрудники компании
        ByEmployee = 3,
    }
    
    public class InfoSourceOriginItem {
        
        private InfoSourceOrigin m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static InfoSourceOriginItem m_Outside = new InfoSourceOriginItem(InfoSourceOrigin.Outside, "Outside", "Внешний");
        
        private static InfoSourceOriginItem m_Inside = new InfoSourceOriginItem(InfoSourceOrigin.Inside, "Inside", "Внутренний");
        
        private static InfoSourceOriginItem m_ByEmployee = new InfoSourceOriginItem(InfoSourceOrigin.ByEmployee, "ByEmployee", "Сотрудники компании");
        
        private static InfoSourceOriginItem[] values = new InfoSourceOriginItem[] {
                InfoSourceOriginItem.m_Outside,
                InfoSourceOriginItem.m_Inside,
                InfoSourceOriginItem.m_ByEmployee};
        
        private InfoSourceOriginItem(InfoSourceOrigin value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static InfoSourceOriginItem Outside {
            get {
                return InfoSourceOriginItem.m_Outside;
            }
        }
        
        public static InfoSourceOriginItem Inside {
            get {
                return InfoSourceOriginItem.m_Inside;
            }
        }
        
        public static InfoSourceOriginItem ByEmployee {
            get {
                return InfoSourceOriginItem.m_ByEmployee;
            }
        }
        
        public static InfoSourceOriginItem[] Values {
            get {
                return InfoSourceOriginItem.values;
            }
        }
        
        public InfoSourceOrigin Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static InfoSourceOriginItem GetItem(InfoSourceOrigin nValue) {
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static InfoSourceOriginItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static InfoSourceOriginItem[] GetItems(InfoSourceOrigin nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            InfoSourceOriginItem[] result = new InfoSourceOriginItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(InfoSourceOrigin nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(InfoSourceOrigin nValue) {
            return InfoSourceOriginItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(InfoSourceOrigin nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(InfoSourceOrigin nValue) {
            return InfoSourceOriginItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(InfoSourceOrigin nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = InfoSourceOriginItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                InfoSourceOriginItem value = ((InfoSourceOriginItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип свойства инцидента
    public enum IPROP_TYPE {
        
        /// Целое число
        IPROP_TYPE_LONG = 1,
        
        /// Число с плавающей точкой
        IPROP_TYPE_DOUBLE = 2,
        
        /// Дата
        IPROP_TYPE_DATE = 3,
        
        /// Время
        IPROP_TYPE_TIME = 4,
        
        /// Дата и время
        IPROP_TYPE_DATEANDTIME = 5,
        
        /// Логический признак
        IPROP_TYPE_BOOLEAN = 6,
        
        /// Строка (до 4000 символов)
        IPROP_TYPE_STRING = 7,
        
        /// Текст (более 4000 символов)
        IPROP_TYPE_TEXT = 8,
        
        /// Изображение
        IPROP_TYPE_PICTURE = 9,
        
        /// Файл
        IPROP_TYPE_FILE = 10,
    }
    
    public class IPROP_TYPEItem {
        
        private IPROP_TYPE m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static IPROP_TYPEItem m_IPROP_TYPE_LONG = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_LONG, "IPROP_TYPE_LONG", "Целое число");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_DOUBLE = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_DOUBLE, "IPROP_TYPE_DOUBLE", "Число с плавающей точкой");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_DATE = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_DATE, "IPROP_TYPE_DATE", "Дата");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_TIME = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_TIME, "IPROP_TYPE_TIME", "Время");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_DATEANDTIME = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_DATEANDTIME, "IPROP_TYPE_DATEANDTIME", "Дата и время");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_BOOLEAN = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_BOOLEAN, "IPROP_TYPE_BOOLEAN", "Логический признак");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_STRING = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_STRING, "IPROP_TYPE_STRING", "Строка (до 4000 символов)");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_TEXT = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_TEXT, "IPROP_TYPE_TEXT", "Текст (более 4000 символов)");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_PICTURE = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_PICTURE, "IPROP_TYPE_PICTURE", "Изображение");
        
        private static IPROP_TYPEItem m_IPROP_TYPE_FILE = new IPROP_TYPEItem(IPROP_TYPE.IPROP_TYPE_FILE, "IPROP_TYPE_FILE", "Файл");
        
        private static IPROP_TYPEItem[] values = new IPROP_TYPEItem[] {
                IPROP_TYPEItem.m_IPROP_TYPE_LONG,
                IPROP_TYPEItem.m_IPROP_TYPE_DOUBLE,
                IPROP_TYPEItem.m_IPROP_TYPE_DATE,
                IPROP_TYPEItem.m_IPROP_TYPE_TIME,
                IPROP_TYPEItem.m_IPROP_TYPE_DATEANDTIME,
                IPROP_TYPEItem.m_IPROP_TYPE_BOOLEAN,
                IPROP_TYPEItem.m_IPROP_TYPE_STRING,
                IPROP_TYPEItem.m_IPROP_TYPE_TEXT,
                IPROP_TYPEItem.m_IPROP_TYPE_PICTURE,
                IPROP_TYPEItem.m_IPROP_TYPE_FILE};
        
        private IPROP_TYPEItem(IPROP_TYPE value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_LONG {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_LONG;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_DOUBLE {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_DOUBLE;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_DATE {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_DATE;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_TIME {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_TIME;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_DATEANDTIME {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_DATEANDTIME;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_BOOLEAN {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_BOOLEAN;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_STRING {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_STRING;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_TEXT {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_TEXT;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_PICTURE {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_PICTURE;
            }
        }
        
        public static IPROP_TYPEItem IPROP_TYPE_FILE {
            get {
                return IPROP_TYPEItem.m_IPROP_TYPE_FILE;
            }
        }
        
        public static IPROP_TYPEItem[] Values {
            get {
                return IPROP_TYPEItem.values;
            }
        }
        
        public IPROP_TYPE Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static IPROP_TYPEItem GetItem(IPROP_TYPE nValue) {
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IPROP_TYPEItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static IPROP_TYPEItem[] GetItems(IPROP_TYPE nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            IPROP_TYPEItem[] result = new IPROP_TYPEItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(IPROP_TYPE nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(IPROP_TYPE nValue) {
            return IPROP_TYPEItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(IPROP_TYPE nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(IPROP_TYPE nValue) {
            return IPROP_TYPEItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(IPROP_TYPE nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = IPROP_TYPEItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                IPROP_TYPEItem value = ((IPROP_TYPEItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Детализация списаний сотрудников
    public enum LossDetalization : short {
        
        /// по отдельным списаниям
        ByLosses = 1,
        
        /// по датам
        ByDates = 2,
    }
    
    public class LossDetalizationItem {
        
        private LossDetalization m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static LossDetalizationItem m_ByLosses = new LossDetalizationItem(LossDetalization.ByLosses, "ByLosses", "по отдельным списаниям");
        
        private static LossDetalizationItem m_ByDates = new LossDetalizationItem(LossDetalization.ByDates, "ByDates", "по датам");
        
        private static LossDetalizationItem[] values = new LossDetalizationItem[] {
                LossDetalizationItem.m_ByLosses,
                LossDetalizationItem.m_ByDates};
        
        private LossDetalizationItem(LossDetalization value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static LossDetalizationItem ByLosses {
            get {
                return LossDetalizationItem.m_ByLosses;
            }
        }
        
        public static LossDetalizationItem ByDates {
            get {
                return LossDetalizationItem.m_ByDates;
            }
        }
        
        public static LossDetalizationItem[] Values {
            get {
                return LossDetalizationItem.values;
            }
        }
        
        public LossDetalization Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static LossDetalizationItem GetItem(LossDetalization nValue) {
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LossDetalizationItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LossDetalizationItem[] GetItems(LossDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            LossDetalizationItem[] result = new LossDetalizationItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(LossDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(LossDetalization nValue) {
            return LossDetalizationItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(LossDetalization nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(LossDetalization nValue) {
            return LossDetalizationItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(LossDetalization nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LossDetalizationItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LossDetalizationItem value = ((LossDetalizationItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки лотов и участников
    public enum LotsAndParticipantsSortType : short {
        
        /// Произвольно
        Random = 0,
        
        /// По наименованию конкурса
        ByTenderName = 1,
        
        /// По наименованию заказчика
        ByCustomerName = 2,
        
        /// По дате проведения
        ByResultAnnounceDate = 3,
    }
    
    public class LotsAndParticipantsSortTypeItem {
        
        private LotsAndParticipantsSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static LotsAndParticipantsSortTypeItem m_Random = new LotsAndParticipantsSortTypeItem(LotsAndParticipantsSortType.Random, "Random", "Произвольно");
        
        private static LotsAndParticipantsSortTypeItem m_ByTenderName = new LotsAndParticipantsSortTypeItem(LotsAndParticipantsSortType.ByTenderName, "ByTenderName", "По наименованию конкурса");
        
        private static LotsAndParticipantsSortTypeItem m_ByCustomerName = new LotsAndParticipantsSortTypeItem(LotsAndParticipantsSortType.ByCustomerName, "ByCustomerName", "По наименованию заказчика");
        
        private static LotsAndParticipantsSortTypeItem m_ByResultAnnounceDate = new LotsAndParticipantsSortTypeItem(LotsAndParticipantsSortType.ByResultAnnounceDate, "ByResultAnnounceDate", "По дате проведения");
        
        private static LotsAndParticipantsSortTypeItem[] values = new LotsAndParticipantsSortTypeItem[] {
                LotsAndParticipantsSortTypeItem.m_Random,
                LotsAndParticipantsSortTypeItem.m_ByTenderName,
                LotsAndParticipantsSortTypeItem.m_ByCustomerName,
                LotsAndParticipantsSortTypeItem.m_ByResultAnnounceDate};
        
        private LotsAndParticipantsSortTypeItem(LotsAndParticipantsSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static LotsAndParticipantsSortTypeItem Random {
            get {
                return LotsAndParticipantsSortTypeItem.m_Random;
            }
        }
        
        public static LotsAndParticipantsSortTypeItem ByTenderName {
            get {
                return LotsAndParticipantsSortTypeItem.m_ByTenderName;
            }
        }
        
        public static LotsAndParticipantsSortTypeItem ByCustomerName {
            get {
                return LotsAndParticipantsSortTypeItem.m_ByCustomerName;
            }
        }
        
        public static LotsAndParticipantsSortTypeItem ByResultAnnounceDate {
            get {
                return LotsAndParticipantsSortTypeItem.m_ByResultAnnounceDate;
            }
        }
        
        public static LotsAndParticipantsSortTypeItem[] Values {
            get {
                return LotsAndParticipantsSortTypeItem.values;
            }
        }
        
        public LotsAndParticipantsSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static LotsAndParticipantsSortTypeItem GetItem(LotsAndParticipantsSortType nValue) {
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LotsAndParticipantsSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LotsAndParticipantsSortTypeItem[] GetItems(LotsAndParticipantsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            LotsAndParticipantsSortTypeItem[] result = new LotsAndParticipantsSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(LotsAndParticipantsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(LotsAndParticipantsSortType nValue) {
            return LotsAndParticipantsSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(LotsAndParticipantsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(LotsAndParticipantsSortType nValue) {
            return LotsAndParticipantsSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(LotsAndParticipantsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LotsAndParticipantsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotsAndParticipantsSortTypeItem value = ((LotsAndParticipantsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Состояние лота
    public enum LotState : short {
        
        /// Получение документов
        DocumentGetting = 0,
        
        /// Принятие решения
        DecisionMaking = 1,
        
        /// Участие
        Participating = 2,
        
        /// Отказ от участия
        ParticipateRejection = 3,
        
        /// Рассмотрение предложения
        UnderConsideration = 4,
        
        /// Выигран
        WasGain = 5,
        
        /// Проигран
        WasLoss = 6,
        
        /// Отменен
        WasAbolish = 7,
        
        /// Заключение госконтракта
        StateContract = 8,
    }
    
    public class LotStateItem {
        
        private LotState m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static LotStateItem m_DocumentGetting = new LotStateItem(LotState.DocumentGetting, "DocumentGetting", "Получение документов");
        
        private static LotStateItem m_DecisionMaking = new LotStateItem(LotState.DecisionMaking, "DecisionMaking", "Принятие решения");
        
        private static LotStateItem m_Participating = new LotStateItem(LotState.Participating, "Participating", "Участие");
        
        private static LotStateItem m_ParticipateRejection = new LotStateItem(LotState.ParticipateRejection, "ParticipateRejection", "Отказ от участия");
        
        private static LotStateItem m_UnderConsideration = new LotStateItem(LotState.UnderConsideration, "UnderConsideration", "Рассмотрение предложения");
        
        private static LotStateItem m_WasGain = new LotStateItem(LotState.WasGain, "WasGain", "Выигран");
        
        private static LotStateItem m_WasLoss = new LotStateItem(LotState.WasLoss, "WasLoss", "Проигран");
        
        private static LotStateItem m_WasAbolish = new LotStateItem(LotState.WasAbolish, "WasAbolish", "Отменен");
        
        private static LotStateItem m_StateContract = new LotStateItem(LotState.StateContract, "StateContract", "Заключение госконтракта");
        
        private static LotStateItem[] values = new LotStateItem[] {
                LotStateItem.m_DocumentGetting,
                LotStateItem.m_DecisionMaking,
                LotStateItem.m_Participating,
                LotStateItem.m_ParticipateRejection,
                LotStateItem.m_UnderConsideration,
                LotStateItem.m_WasGain,
                LotStateItem.m_WasLoss,
                LotStateItem.m_WasAbolish,
                LotStateItem.m_StateContract};
        
        private LotStateItem(LotState value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static LotStateItem DocumentGetting {
            get {
                return LotStateItem.m_DocumentGetting;
            }
        }
        
        public static LotStateItem DecisionMaking {
            get {
                return LotStateItem.m_DecisionMaking;
            }
        }
        
        public static LotStateItem Participating {
            get {
                return LotStateItem.m_Participating;
            }
        }
        
        public static LotStateItem ParticipateRejection {
            get {
                return LotStateItem.m_ParticipateRejection;
            }
        }
        
        public static LotStateItem UnderConsideration {
            get {
                return LotStateItem.m_UnderConsideration;
            }
        }
        
        public static LotStateItem WasGain {
            get {
                return LotStateItem.m_WasGain;
            }
        }
        
        public static LotStateItem WasLoss {
            get {
                return LotStateItem.m_WasLoss;
            }
        }
        
        public static LotStateItem WasAbolish {
            get {
                return LotStateItem.m_WasAbolish;
            }
        }
        
        public static LotStateItem StateContract {
            get {
                return LotStateItem.m_StateContract;
            }
        }
        
        public static LotStateItem[] Values {
            get {
                return LotStateItem.values;
            }
        }
        
        public LotState Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static LotStateItem GetItem(LotState nValue) {
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LotStateItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static LotStateItem[] GetItems(LotState nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            LotStateItem[] result = new LotStateItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(LotState nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(LotState nValue) {
            return LotStateItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(LotState nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(LotState nValue) {
            return LotStateItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(LotState nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = LotStateItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                LotStateItem value = ((LotStateItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип участия
    public enum Participations : short {
        
        /// Участник
        Participant = 1,
        
        /// Конкурент
        Competitor = 2,
        
        /// Конкурент-помогающий
        CompetitorHelper = 3,
        
        /// Конкурент-должник
        CompetitorDebtor = 4,
    }
    
    public class ParticipationsItem {
        
        private Participations m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ParticipationsItem m_Participant = new ParticipationsItem(Participations.Participant, "Participant", "Участник");
        
        private static ParticipationsItem m_Competitor = new ParticipationsItem(Participations.Competitor, "Competitor", "Конкурент");
        
        private static ParticipationsItem m_CompetitorHelper = new ParticipationsItem(Participations.CompetitorHelper, "CompetitorHelper", "Конкурент-помогающий");
        
        private static ParticipationsItem m_CompetitorDebtor = new ParticipationsItem(Participations.CompetitorDebtor, "CompetitorDebtor", "Конкурент-должник");
        
        private static ParticipationsItem[] values = new ParticipationsItem[] {
                ParticipationsItem.m_Participant,
                ParticipationsItem.m_Competitor,
                ParticipationsItem.m_CompetitorHelper,
                ParticipationsItem.m_CompetitorDebtor};
        
        private ParticipationsItem(Participations value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ParticipationsItem Participant {
            get {
                return ParticipationsItem.m_Participant;
            }
        }
        
        public static ParticipationsItem Competitor {
            get {
                return ParticipationsItem.m_Competitor;
            }
        }
        
        public static ParticipationsItem CompetitorHelper {
            get {
                return ParticipationsItem.m_CompetitorHelper;
            }
        }
        
        public static ParticipationsItem CompetitorDebtor {
            get {
                return ParticipationsItem.m_CompetitorDebtor;
            }
        }
        
        public static ParticipationsItem[] Values {
            get {
                return ParticipationsItem.values;
            }
        }
        
        public Participations Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ParticipationsItem GetItem(Participations nValue) {
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ParticipationsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ParticipationsItem[] GetItems(Participations nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ParticipationsItem[] result = new ParticipationsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(Participations nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(Participations nValue) {
            return ParticipationsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(Participations nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(Participations nValue) {
            return ParticipationsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(Participations nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ParticipationsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ParticipationsItem value = ((ParticipationsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Период времени
    public enum PeriodType : short {
        
        /// Интервал дат
        DateInterval = 1,
        
        /// На текущую неделю
        CurrentWeek = 2,
        
        /// На текущий месяц
        CurrentMonth = 3,
        
        /// На предыдущий месяц
        PreviousMonth = 5,
        
        /// На заданный квартал
        SelectedQuarter = 4,
    }
    
    public class PeriodTypeItem {
        
        private PeriodType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static PeriodTypeItem m_DateInterval = new PeriodTypeItem(PeriodType.DateInterval, "DateInterval", "Интервал дат");
        
        private static PeriodTypeItem m_CurrentWeek = new PeriodTypeItem(PeriodType.CurrentWeek, "CurrentWeek", "На текущую неделю");
        
        private static PeriodTypeItem m_CurrentMonth = new PeriodTypeItem(PeriodType.CurrentMonth, "CurrentMonth", "На текущий месяц");
        
        private static PeriodTypeItem m_PreviousMonth = new PeriodTypeItem(PeriodType.PreviousMonth, "PreviousMonth", "На предыдущий месяц");
        
        private static PeriodTypeItem m_SelectedQuarter = new PeriodTypeItem(PeriodType.SelectedQuarter, "SelectedQuarter", "На заданный квартал");
        
        private static PeriodTypeItem[] values = new PeriodTypeItem[] {
                PeriodTypeItem.m_DateInterval,
                PeriodTypeItem.m_CurrentWeek,
                PeriodTypeItem.m_CurrentMonth,
                PeriodTypeItem.m_PreviousMonth,
                PeriodTypeItem.m_SelectedQuarter};
        
        private PeriodTypeItem(PeriodType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static PeriodTypeItem DateInterval {
            get {
                return PeriodTypeItem.m_DateInterval;
            }
        }
        
        public static PeriodTypeItem CurrentWeek {
            get {
                return PeriodTypeItem.m_CurrentWeek;
            }
        }
        
        public static PeriodTypeItem CurrentMonth {
            get {
                return PeriodTypeItem.m_CurrentMonth;
            }
        }
        
        public static PeriodTypeItem PreviousMonth {
            get {
                return PeriodTypeItem.m_PreviousMonth;
            }
        }
        
        public static PeriodTypeItem SelectedQuarter {
            get {
                return PeriodTypeItem.m_SelectedQuarter;
            }
        }
        
        public static PeriodTypeItem[] Values {
            get {
                return PeriodTypeItem.values;
            }
        }
        
        public PeriodType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static PeriodTypeItem GetItem(PeriodType nValue) {
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static PeriodTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static PeriodTypeItem[] GetItems(PeriodType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            PeriodTypeItem[] result = new PeriodTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(PeriodType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(PeriodType nValue) {
            return PeriodTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(PeriodType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(PeriodType nValue) {
            return PeriodTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(PeriodType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = PeriodTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PeriodTypeItem value = ((PeriodTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Формат отображения ссылки
    [Flags()]
    public enum PresentationModes {
        
        /// Отображать наименование
        DisplayDescr = 1,
        
        /// Отображать данные
        DisplayData = 2,
    }
    
    public class PresentationModesItem {
        
        private PresentationModes m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static PresentationModesItem m_DisplayDescr = new PresentationModesItem(PresentationModes.DisplayDescr, "DisplayDescr", "Отображать наименование");
        
        private static PresentationModesItem m_DisplayData = new PresentationModesItem(PresentationModes.DisplayData, "DisplayData", "Отображать данные");
        
        private static PresentationModesItem[] values = new PresentationModesItem[] {
                PresentationModesItem.m_DisplayDescr,
                PresentationModesItem.m_DisplayData};
        
        private PresentationModesItem(PresentationModes value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static PresentationModesItem DisplayDescr {
            get {
                return PresentationModesItem.m_DisplayDescr;
            }
        }
        
        public static PresentationModesItem DisplayData {
            get {
                return PresentationModesItem.m_DisplayData;
            }
        }
        
        public static PresentationModesItem[] Values {
            get {
                return PresentationModesItem.values;
            }
        }
        
        public PresentationModes Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static PresentationModesItem GetItem(PresentationModes nValue) {
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static PresentationModesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static PresentationModesItem[] GetItems(PresentationModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            PresentationModesItem[] result = new PresentationModesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(PresentationModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(PresentationModes nValue) {
            return PresentationModesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(PresentationModes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(PresentationModes nValue) {
            return PresentationModesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(PresentationModes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = PresentationModesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                PresentationModesItem value = ((PresentationModesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Квартал
    public enum Quarter : short {
        
        /// 1-й
        First = 1,
        
        /// 2-й
        Second = 2,
        
        /// 3-й
        Third = 3,
        
        /// 4-й
        Fourth = 4,
    }
    
    public class QuarterItem {
        
        private Quarter m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static QuarterItem m_First = new QuarterItem(Quarter.First, "First", "1-й");
        
        private static QuarterItem m_Second = new QuarterItem(Quarter.Second, "Second", "2-й");
        
        private static QuarterItem m_Third = new QuarterItem(Quarter.Third, "Third", "3-й");
        
        private static QuarterItem m_Fourth = new QuarterItem(Quarter.Fourth, "Fourth", "4-й");
        
        private static QuarterItem[] values = new QuarterItem[] {
                QuarterItem.m_First,
                QuarterItem.m_Second,
                QuarterItem.m_Third,
                QuarterItem.m_Fourth};
        
        private QuarterItem(Quarter value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static QuarterItem First {
            get {
                return QuarterItem.m_First;
            }
        }
        
        public static QuarterItem Second {
            get {
                return QuarterItem.m_Second;
            }
        }
        
        public static QuarterItem Third {
            get {
                return QuarterItem.m_Third;
            }
        }
        
        public static QuarterItem Fourth {
            get {
                return QuarterItem.m_Fourth;
            }
        }
        
        public static QuarterItem[] Values {
            get {
                return QuarterItem.values;
            }
        }
        
        public Quarter Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static QuarterItem GetItem(Quarter nValue) {
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static QuarterItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static QuarterItem[] GetItems(Quarter nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            QuarterItem[] result = new QuarterItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(Quarter nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(Quarter nValue) {
            return QuarterItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(Quarter nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(Quarter nValue) {
            return QuarterItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(Quarter nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = QuarterItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                QuarterItem value = ((QuarterItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Объем анализируемых данных отчета "Структура затрат подразделений"
    public enum RepDepartmentExpensesStructure_AnalysisDepth {
        
        /// Только указанные подразделения / организации
        OnlySelected = 0,
        
        /// Включать данные непосредственно подчиненных подразделений
        FirstLevelDepends = 1,
        
        /// Включать данные всех подчиненных подразделений
        AllLevelDepends = 2,
    }
    
    public class RepDepartmentExpensesStructure_AnalysisDepthItem {
        
        private RepDepartmentExpensesStructure_AnalysisDepth m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static RepDepartmentExpensesStructure_AnalysisDepthItem m_OnlySelected = new RepDepartmentExpensesStructure_AnalysisDepthItem(RepDepartmentExpensesStructure_AnalysisDepth.OnlySelected, "OnlySelected", "Только указанные подразделения / организации");
        
        private static RepDepartmentExpensesStructure_AnalysisDepthItem m_FirstLevelDepends = new RepDepartmentExpensesStructure_AnalysisDepthItem(RepDepartmentExpensesStructure_AnalysisDepth.FirstLevelDepends, "FirstLevelDepends", "Включать данные непосредственно подчиненных подразделений");
        
        private static RepDepartmentExpensesStructure_AnalysisDepthItem m_AllLevelDepends = new RepDepartmentExpensesStructure_AnalysisDepthItem(RepDepartmentExpensesStructure_AnalysisDepth.AllLevelDepends, "AllLevelDepends", "Включать данные всех подчиненных подразделений");
        
        private static RepDepartmentExpensesStructure_AnalysisDepthItem[] values = new RepDepartmentExpensesStructure_AnalysisDepthItem[] {
                RepDepartmentExpensesStructure_AnalysisDepthItem.m_OnlySelected,
                RepDepartmentExpensesStructure_AnalysisDepthItem.m_FirstLevelDepends,
                RepDepartmentExpensesStructure_AnalysisDepthItem.m_AllLevelDepends};
        
        private RepDepartmentExpensesStructure_AnalysisDepthItem(RepDepartmentExpensesStructure_AnalysisDepth value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem OnlySelected {
            get {
                return RepDepartmentExpensesStructure_AnalysisDepthItem.m_OnlySelected;
            }
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem FirstLevelDepends {
            get {
                return RepDepartmentExpensesStructure_AnalysisDepthItem.m_FirstLevelDepends;
            }
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem AllLevelDepends {
            get {
                return RepDepartmentExpensesStructure_AnalysisDepthItem.m_AllLevelDepends;
            }
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem[] Values {
            get {
                return RepDepartmentExpensesStructure_AnalysisDepthItem.values;
            }
        }
        
        public RepDepartmentExpensesStructure_AnalysisDepth Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem GetItem(RepDepartmentExpensesStructure_AnalysisDepth nValue) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_AnalysisDepthItem[] GetItems(RepDepartmentExpensesStructure_AnalysisDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            RepDepartmentExpensesStructure_AnalysisDepthItem[] result = new RepDepartmentExpensesStructure_AnalysisDepthItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_AnalysisDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_AnalysisDepth nValue) {
            return RepDepartmentExpensesStructure_AnalysisDepthItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_AnalysisDepth nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_AnalysisDepth nValue) {
            return RepDepartmentExpensesStructure_AnalysisDepthItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(RepDepartmentExpensesStructure_AnalysisDepth nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_AnalysisDepthItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_AnalysisDepthItem value = ((RepDepartmentExpensesStructure_AnalysisDepthItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Форма представления данных отчета "Структура затрат подразделений"
    public enum RepDepartmentExpensesStructure_DataFormat {
        
        /// Время и проценты
        TimeAndPercent = 0,
        
        /// Только время
        OnlyTime = 1,
        
        /// Только проценты
        OnlyPercent = 2,
    }
    
    public class RepDepartmentExpensesStructure_DataFormatItem {
        
        private RepDepartmentExpensesStructure_DataFormat m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static RepDepartmentExpensesStructure_DataFormatItem m_TimeAndPercent = new RepDepartmentExpensesStructure_DataFormatItem(RepDepartmentExpensesStructure_DataFormat.TimeAndPercent, "TimeAndPercent", "Время и проценты");
        
        private static RepDepartmentExpensesStructure_DataFormatItem m_OnlyTime = new RepDepartmentExpensesStructure_DataFormatItem(RepDepartmentExpensesStructure_DataFormat.OnlyTime, "OnlyTime", "Только время");
        
        private static RepDepartmentExpensesStructure_DataFormatItem m_OnlyPercent = new RepDepartmentExpensesStructure_DataFormatItem(RepDepartmentExpensesStructure_DataFormat.OnlyPercent, "OnlyPercent", "Только проценты");
        
        private static RepDepartmentExpensesStructure_DataFormatItem[] values = new RepDepartmentExpensesStructure_DataFormatItem[] {
                RepDepartmentExpensesStructure_DataFormatItem.m_TimeAndPercent,
                RepDepartmentExpensesStructure_DataFormatItem.m_OnlyTime,
                RepDepartmentExpensesStructure_DataFormatItem.m_OnlyPercent};
        
        private RepDepartmentExpensesStructure_DataFormatItem(RepDepartmentExpensesStructure_DataFormat value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem TimeAndPercent {
            get {
                return RepDepartmentExpensesStructure_DataFormatItem.m_TimeAndPercent;
            }
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem OnlyTime {
            get {
                return RepDepartmentExpensesStructure_DataFormatItem.m_OnlyTime;
            }
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem OnlyPercent {
            get {
                return RepDepartmentExpensesStructure_DataFormatItem.m_OnlyPercent;
            }
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem[] Values {
            get {
                return RepDepartmentExpensesStructure_DataFormatItem.values;
            }
        }
        
        public RepDepartmentExpensesStructure_DataFormat Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem GetItem(RepDepartmentExpensesStructure_DataFormat nValue) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_DataFormatItem[] GetItems(RepDepartmentExpensesStructure_DataFormat nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            RepDepartmentExpensesStructure_DataFormatItem[] result = new RepDepartmentExpensesStructure_DataFormatItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_DataFormat nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_DataFormat nValue) {
            return RepDepartmentExpensesStructure_DataFormatItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_DataFormat nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_DataFormat nValue) {
            return RepDepartmentExpensesStructure_DataFormatItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(RepDepartmentExpensesStructure_DataFormat nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_DataFormatItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_DataFormatItem value = ((RepDepartmentExpensesStructure_DataFormatItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Отображаемые колонки отчета "Структура затрат подразделений"
    [Flags()]
    public enum RepDepartmentExpensesStructure_OptColsFlags {
        
        /// Норма рабочего времени
        ShowPeriodRate = 1,
        
        /// Дисбаланс
        ShowPeriodDisbalance = 2,
        
        /// Коэффициент утилизации
        ShowUtilization = 4,
        
        /// Причины списания
        ShowCauseDetailization = 8,
    }
    
    public class RepDepartmentExpensesStructure_OptColsFlagsItem {
        
        private RepDepartmentExpensesStructure_OptColsFlags m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static RepDepartmentExpensesStructure_OptColsFlagsItem m_ShowPeriodRate = new RepDepartmentExpensesStructure_OptColsFlagsItem(RepDepartmentExpensesStructure_OptColsFlags.ShowPeriodRate, "ShowPeriodRate", "Норма рабочего времени");
        
        private static RepDepartmentExpensesStructure_OptColsFlagsItem m_ShowPeriodDisbalance = new RepDepartmentExpensesStructure_OptColsFlagsItem(RepDepartmentExpensesStructure_OptColsFlags.ShowPeriodDisbalance, "ShowPeriodDisbalance", "Дисбаланс");
        
        private static RepDepartmentExpensesStructure_OptColsFlagsItem m_ShowUtilization = new RepDepartmentExpensesStructure_OptColsFlagsItem(RepDepartmentExpensesStructure_OptColsFlags.ShowUtilization, "ShowUtilization", "Коэффициент утилизации");
        
        private static RepDepartmentExpensesStructure_OptColsFlagsItem m_ShowCauseDetailization = new RepDepartmentExpensesStructure_OptColsFlagsItem(RepDepartmentExpensesStructure_OptColsFlags.ShowCauseDetailization, "ShowCauseDetailization", "Причины списания");
        
        private static RepDepartmentExpensesStructure_OptColsFlagsItem[] values = new RepDepartmentExpensesStructure_OptColsFlagsItem[] {
                RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowPeriodRate,
                RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowPeriodDisbalance,
                RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowUtilization,
                RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowCauseDetailization};
        
        private RepDepartmentExpensesStructure_OptColsFlagsItem(RepDepartmentExpensesStructure_OptColsFlags value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem ShowPeriodRate {
            get {
                return RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowPeriodRate;
            }
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem ShowPeriodDisbalance {
            get {
                return RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowPeriodDisbalance;
            }
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem ShowUtilization {
            get {
                return RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowUtilization;
            }
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem ShowCauseDetailization {
            get {
                return RepDepartmentExpensesStructure_OptColsFlagsItem.m_ShowCauseDetailization;
            }
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem[] Values {
            get {
                return RepDepartmentExpensesStructure_OptColsFlagsItem.values;
            }
        }
        
        public RepDepartmentExpensesStructure_OptColsFlags Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem GetItem(RepDepartmentExpensesStructure_OptColsFlags nValue) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_OptColsFlagsItem[] GetItems(RepDepartmentExpensesStructure_OptColsFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            RepDepartmentExpensesStructure_OptColsFlagsItem[] result = new RepDepartmentExpensesStructure_OptColsFlagsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_OptColsFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_OptColsFlags nValue) {
            return RepDepartmentExpensesStructure_OptColsFlagsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_OptColsFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_OptColsFlags nValue) {
            return RepDepartmentExpensesStructure_OptColsFlagsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(RepDepartmentExpensesStructure_OptColsFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_OptColsFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_OptColsFlagsItem value = ((RepDepartmentExpensesStructure_OptColsFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Форма отчета "Структура затрат подразделений"
    public enum RepDepartmentExpensesStructure_ReportForm {
        
        /// Суммарные данные подразделений
        ByDepartment = 0,
        
        /// Данные по каждому сотруднику подразделения
        ByEmployee = 1,
        
        /// Данные по каждому сотруднику, с данными по заданиям
        ByEmployeeWithTasksDetali = 2,
    }
    
    public class RepDepartmentExpensesStructure_ReportFormItem {
        
        private RepDepartmentExpensesStructure_ReportForm m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static RepDepartmentExpensesStructure_ReportFormItem m_ByDepartment = new RepDepartmentExpensesStructure_ReportFormItem(RepDepartmentExpensesStructure_ReportForm.ByDepartment, "ByDepartment", "Суммарные данные подразделений");
        
        private static RepDepartmentExpensesStructure_ReportFormItem m_ByEmployee = new RepDepartmentExpensesStructure_ReportFormItem(RepDepartmentExpensesStructure_ReportForm.ByEmployee, "ByEmployee", "Данные по каждому сотруднику подразделения");
        
        private static RepDepartmentExpensesStructure_ReportFormItem m_ByEmployeeWithTasksDetali = new RepDepartmentExpensesStructure_ReportFormItem(RepDepartmentExpensesStructure_ReportForm.ByEmployeeWithTasksDetali, "ByEmployeeWithTasksDetali", "Данные по каждому сотруднику, с данными по заданиям");
        
        private static RepDepartmentExpensesStructure_ReportFormItem[] values = new RepDepartmentExpensesStructure_ReportFormItem[] {
                RepDepartmentExpensesStructure_ReportFormItem.m_ByDepartment,
                RepDepartmentExpensesStructure_ReportFormItem.m_ByEmployee,
                RepDepartmentExpensesStructure_ReportFormItem.m_ByEmployeeWithTasksDetali};
        
        private RepDepartmentExpensesStructure_ReportFormItem(RepDepartmentExpensesStructure_ReportForm value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem ByDepartment {
            get {
                return RepDepartmentExpensesStructure_ReportFormItem.m_ByDepartment;
            }
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem ByEmployee {
            get {
                return RepDepartmentExpensesStructure_ReportFormItem.m_ByEmployee;
            }
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem ByEmployeeWithTasksDetali {
            get {
                return RepDepartmentExpensesStructure_ReportFormItem.m_ByEmployeeWithTasksDetali;
            }
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem[] Values {
            get {
                return RepDepartmentExpensesStructure_ReportFormItem.values;
            }
        }
        
        public RepDepartmentExpensesStructure_ReportForm Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem GetItem(RepDepartmentExpensesStructure_ReportForm nValue) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_ReportFormItem[] GetItems(RepDepartmentExpensesStructure_ReportForm nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            RepDepartmentExpensesStructure_ReportFormItem[] result = new RepDepartmentExpensesStructure_ReportFormItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_ReportForm nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_ReportForm nValue) {
            return RepDepartmentExpensesStructure_ReportFormItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_ReportForm nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_ReportForm nValue) {
            return RepDepartmentExpensesStructure_ReportFormItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(RepDepartmentExpensesStructure_ReportForm nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_ReportFormItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_ReportFormItem value = ((RepDepartmentExpensesStructure_ReportFormItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Сортировка в отчете "Структура затрат подразделений"
    public enum RepDepartmentExpensesStructure_SortingMode {
        
        /// По подразделению / сотруднику
        ByName = 0,
        
        /// По трудозатратам
        ByExpenses = 1,
        
        /// По значению дисбаланса
        ByDisbalance = 2,
        
        /// По значению коэффициента утилизации
        ByUtilization = 3,
    }
    
    public class RepDepartmentExpensesStructure_SortingModeItem {
        
        private RepDepartmentExpensesStructure_SortingMode m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static RepDepartmentExpensesStructure_SortingModeItem m_ByName = new RepDepartmentExpensesStructure_SortingModeItem(RepDepartmentExpensesStructure_SortingMode.ByName, "ByName", "По подразделению / сотруднику");
        
        private static RepDepartmentExpensesStructure_SortingModeItem m_ByExpenses = new RepDepartmentExpensesStructure_SortingModeItem(RepDepartmentExpensesStructure_SortingMode.ByExpenses, "ByExpenses", "По трудозатратам");
        
        private static RepDepartmentExpensesStructure_SortingModeItem m_ByDisbalance = new RepDepartmentExpensesStructure_SortingModeItem(RepDepartmentExpensesStructure_SortingMode.ByDisbalance, "ByDisbalance", "По значению дисбаланса");
        
        private static RepDepartmentExpensesStructure_SortingModeItem m_ByUtilization = new RepDepartmentExpensesStructure_SortingModeItem(RepDepartmentExpensesStructure_SortingMode.ByUtilization, "ByUtilization", "По значению коэффициента утилизации");
        
        private static RepDepartmentExpensesStructure_SortingModeItem[] values = new RepDepartmentExpensesStructure_SortingModeItem[] {
                RepDepartmentExpensesStructure_SortingModeItem.m_ByName,
                RepDepartmentExpensesStructure_SortingModeItem.m_ByExpenses,
                RepDepartmentExpensesStructure_SortingModeItem.m_ByDisbalance,
                RepDepartmentExpensesStructure_SortingModeItem.m_ByUtilization};
        
        private RepDepartmentExpensesStructure_SortingModeItem(RepDepartmentExpensesStructure_SortingMode value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem ByName {
            get {
                return RepDepartmentExpensesStructure_SortingModeItem.m_ByName;
            }
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem ByExpenses {
            get {
                return RepDepartmentExpensesStructure_SortingModeItem.m_ByExpenses;
            }
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem ByDisbalance {
            get {
                return RepDepartmentExpensesStructure_SortingModeItem.m_ByDisbalance;
            }
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem ByUtilization {
            get {
                return RepDepartmentExpensesStructure_SortingModeItem.m_ByUtilization;
            }
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem[] Values {
            get {
                return RepDepartmentExpensesStructure_SortingModeItem.values;
            }
        }
        
        public RepDepartmentExpensesStructure_SortingMode Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem GetItem(RepDepartmentExpensesStructure_SortingMode nValue) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static RepDepartmentExpensesStructure_SortingModeItem[] GetItems(RepDepartmentExpensesStructure_SortingMode nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            RepDepartmentExpensesStructure_SortingModeItem[] result = new RepDepartmentExpensesStructure_SortingModeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_SortingMode nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(RepDepartmentExpensesStructure_SortingMode nValue) {
            return RepDepartmentExpensesStructure_SortingModeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_SortingMode nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(RepDepartmentExpensesStructure_SortingMode nValue) {
            return RepDepartmentExpensesStructure_SortingModeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(RepDepartmentExpensesStructure_SortingMode nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = RepDepartmentExpensesStructure_SortingModeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                RepDepartmentExpensesStructure_SortingModeItem value = ((RepDepartmentExpensesStructure_SortingModeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Список активностей"
    public enum ReportActivityListSortType : short {
        
        /// Произвольно
        Random = 0,
        
        /// По наименованию
        ByName = 1,
        
        /// По коду
        ByCode = 2,
        
        /// По идентификатору для Navision
        ByNavisionID = 3,
    }
    
    public class ReportActivityListSortTypeItem {
        
        private ReportActivityListSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportActivityListSortTypeItem m_Random = new ReportActivityListSortTypeItem(ReportActivityListSortType.Random, "Random", "Произвольно");
        
        private static ReportActivityListSortTypeItem m_ByName = new ReportActivityListSortTypeItem(ReportActivityListSortType.ByName, "ByName", "По наименованию");
        
        private static ReportActivityListSortTypeItem m_ByCode = new ReportActivityListSortTypeItem(ReportActivityListSortType.ByCode, "ByCode", "По коду");
        
        private static ReportActivityListSortTypeItem m_ByNavisionID = new ReportActivityListSortTypeItem(ReportActivityListSortType.ByNavisionID, "ByNavisionID", "По идентификатору для Navision");
        
        private static ReportActivityListSortTypeItem[] values = new ReportActivityListSortTypeItem[] {
                ReportActivityListSortTypeItem.m_Random,
                ReportActivityListSortTypeItem.m_ByName,
                ReportActivityListSortTypeItem.m_ByCode,
                ReportActivityListSortTypeItem.m_ByNavisionID};
        
        private ReportActivityListSortTypeItem(ReportActivityListSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportActivityListSortTypeItem Random {
            get {
                return ReportActivityListSortTypeItem.m_Random;
            }
        }
        
        public static ReportActivityListSortTypeItem ByName {
            get {
                return ReportActivityListSortTypeItem.m_ByName;
            }
        }
        
        public static ReportActivityListSortTypeItem ByCode {
            get {
                return ReportActivityListSortTypeItem.m_ByCode;
            }
        }
        
        public static ReportActivityListSortTypeItem ByNavisionID {
            get {
                return ReportActivityListSortTypeItem.m_ByNavisionID;
            }
        }
        
        public static ReportActivityListSortTypeItem[] Values {
            get {
                return ReportActivityListSortTypeItem.values;
            }
        }
        
        public ReportActivityListSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportActivityListSortTypeItem GetItem(ReportActivityListSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportActivityListSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportActivityListSortTypeItem[] GetItems(ReportActivityListSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportActivityListSortTypeItem[] result = new ReportActivityListSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportActivityListSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportActivityListSortType nValue) {
            return ReportActivityListSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportActivityListSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportActivityListSortType nValue) {
            return ReportActivityListSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportActivityListSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportActivityListSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportActivityListSortTypeItem value = ((ReportActivityListSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Сортировка отчета "Затраты в разрезе Департаментов"
    public enum ReportDepartmentCostSort : short {
        
        /// По департаментам
        DepartmentSort = 0,
        
        /// По затратам
        CostSort = 1,
    }
    
    public class ReportDepartmentCostSortItem {
        
        private ReportDepartmentCostSort m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportDepartmentCostSortItem m_DepartmentSort = new ReportDepartmentCostSortItem(ReportDepartmentCostSort.DepartmentSort, "DepartmentSort", "По департаментам");
        
        private static ReportDepartmentCostSortItem m_CostSort = new ReportDepartmentCostSortItem(ReportDepartmentCostSort.CostSort, "CostSort", "По затратам");
        
        private static ReportDepartmentCostSortItem[] values = new ReportDepartmentCostSortItem[] {
                ReportDepartmentCostSortItem.m_DepartmentSort,
                ReportDepartmentCostSortItem.m_CostSort};
        
        private ReportDepartmentCostSortItem(ReportDepartmentCostSort value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportDepartmentCostSortItem DepartmentSort {
            get {
                return ReportDepartmentCostSortItem.m_DepartmentSort;
            }
        }
        
        public static ReportDepartmentCostSortItem CostSort {
            get {
                return ReportDepartmentCostSortItem.m_CostSort;
            }
        }
        
        public static ReportDepartmentCostSortItem[] Values {
            get {
                return ReportDepartmentCostSortItem.values;
            }
        }
        
        public ReportDepartmentCostSort Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportDepartmentCostSortItem GetItem(ReportDepartmentCostSort nValue) {
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportDepartmentCostSortItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportDepartmentCostSortItem[] GetItems(ReportDepartmentCostSort nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportDepartmentCostSortItem[] result = new ReportDepartmentCostSortItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportDepartmentCostSort nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportDepartmentCostSort nValue) {
            return ReportDepartmentCostSortItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportDepartmentCostSort nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportDepartmentCostSort nValue) {
            return ReportDepartmentCostSortItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportDepartmentCostSort nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportDepartmentCostSortItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportDepartmentCostSortItem value = ((ReportDepartmentCostSortItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Занятость сотрудников в проектах"
    public enum ReportEmployeesBusynessInProjectsSortType : short {
        
        /// произвольно
        Random = 0,
        
        /// по аккаунту
        ByCustomer = 1,
        
        /// по активности
        ByFolder = 2,
        
        /// по трудозатратам
        ByExpense = 3,
    }
    
    public class ReportEmployeesBusynessInProjectsSortTypeItem {
        
        private ReportEmployeesBusynessInProjectsSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportEmployeesBusynessInProjectsSortTypeItem m_Random = new ReportEmployeesBusynessInProjectsSortTypeItem(ReportEmployeesBusynessInProjectsSortType.Random, "Random", "произвольно");
        
        private static ReportEmployeesBusynessInProjectsSortTypeItem m_ByCustomer = new ReportEmployeesBusynessInProjectsSortTypeItem(ReportEmployeesBusynessInProjectsSortType.ByCustomer, "ByCustomer", "по аккаунту");
        
        private static ReportEmployeesBusynessInProjectsSortTypeItem m_ByFolder = new ReportEmployeesBusynessInProjectsSortTypeItem(ReportEmployeesBusynessInProjectsSortType.ByFolder, "ByFolder", "по активности");
        
        private static ReportEmployeesBusynessInProjectsSortTypeItem m_ByExpense = new ReportEmployeesBusynessInProjectsSortTypeItem(ReportEmployeesBusynessInProjectsSortType.ByExpense, "ByExpense", "по трудозатратам");
        
        private static ReportEmployeesBusynessInProjectsSortTypeItem[] values = new ReportEmployeesBusynessInProjectsSortTypeItem[] {
                ReportEmployeesBusynessInProjectsSortTypeItem.m_Random,
                ReportEmployeesBusynessInProjectsSortTypeItem.m_ByCustomer,
                ReportEmployeesBusynessInProjectsSortTypeItem.m_ByFolder,
                ReportEmployeesBusynessInProjectsSortTypeItem.m_ByExpense};
        
        private ReportEmployeesBusynessInProjectsSortTypeItem(ReportEmployeesBusynessInProjectsSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem Random {
            get {
                return ReportEmployeesBusynessInProjectsSortTypeItem.m_Random;
            }
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem ByCustomer {
            get {
                return ReportEmployeesBusynessInProjectsSortTypeItem.m_ByCustomer;
            }
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem ByFolder {
            get {
                return ReportEmployeesBusynessInProjectsSortTypeItem.m_ByFolder;
            }
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem ByExpense {
            get {
                return ReportEmployeesBusynessInProjectsSortTypeItem.m_ByExpense;
            }
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem[] Values {
            get {
                return ReportEmployeesBusynessInProjectsSortTypeItem.values;
            }
        }
        
        public ReportEmployeesBusynessInProjectsSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem GetItem(ReportEmployeesBusynessInProjectsSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportEmployeesBusynessInProjectsSortTypeItem[] GetItems(ReportEmployeesBusynessInProjectsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportEmployeesBusynessInProjectsSortTypeItem[] result = new ReportEmployeesBusynessInProjectsSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportEmployeesBusynessInProjectsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportEmployeesBusynessInProjectsSortType nValue) {
            return ReportEmployeesBusynessInProjectsSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportEmployeesBusynessInProjectsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportEmployeesBusynessInProjectsSortType nValue) {
            return ReportEmployeesBusynessInProjectsSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportEmployeesBusynessInProjectsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportEmployeesBusynessInProjectsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportEmployeesBusynessInProjectsSortTypeItem value = ((ReportEmployeesBusynessInProjectsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Затраты в разрезе направлений"
    public enum ReportExpensesByDirectionsSortType : short {
        
        /// По направлению
        ByDirection = 0,
        
        /// По сумме затрат
        ByExpenses = 1,
    }
    
    public class ReportExpensesByDirectionsSortTypeItem {
        
        private ReportExpensesByDirectionsSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportExpensesByDirectionsSortTypeItem m_ByDirection = new ReportExpensesByDirectionsSortTypeItem(ReportExpensesByDirectionsSortType.ByDirection, "ByDirection", "По направлению");
        
        private static ReportExpensesByDirectionsSortTypeItem m_ByExpenses = new ReportExpensesByDirectionsSortTypeItem(ReportExpensesByDirectionsSortType.ByExpenses, "ByExpenses", "По сумме затрат");
        
        private static ReportExpensesByDirectionsSortTypeItem[] values = new ReportExpensesByDirectionsSortTypeItem[] {
                ReportExpensesByDirectionsSortTypeItem.m_ByDirection,
                ReportExpensesByDirectionsSortTypeItem.m_ByExpenses};
        
        private ReportExpensesByDirectionsSortTypeItem(ReportExpensesByDirectionsSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportExpensesByDirectionsSortTypeItem ByDirection {
            get {
                return ReportExpensesByDirectionsSortTypeItem.m_ByDirection;
            }
        }
        
        public static ReportExpensesByDirectionsSortTypeItem ByExpenses {
            get {
                return ReportExpensesByDirectionsSortTypeItem.m_ByExpenses;
            }
        }
        
        public static ReportExpensesByDirectionsSortTypeItem[] Values {
            get {
                return ReportExpensesByDirectionsSortTypeItem.values;
            }
        }
        
        public ReportExpensesByDirectionsSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportExpensesByDirectionsSortTypeItem GetItem(ReportExpensesByDirectionsSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportExpensesByDirectionsSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportExpensesByDirectionsSortTypeItem[] GetItems(ReportExpensesByDirectionsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportExpensesByDirectionsSortTypeItem[] result = new ReportExpensesByDirectionsSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportExpensesByDirectionsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportExpensesByDirectionsSortType nValue) {
            return ReportExpensesByDirectionsSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportExpensesByDirectionsSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportExpensesByDirectionsSortType nValue) {
            return ReportExpensesByDirectionsSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportExpensesByDirectionsSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportExpensesByDirectionsSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportExpensesByDirectionsSortTypeItem value = ((ReportExpensesByDirectionsSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Даты последнего учета затрат сотрудниками"
    public enum ReportLastExpenseDatesSortType : short {
        
        /// произвольно
        Random = 0,
        
        /// по сотруднику
        ByEmployee = 1,
        
        /// по дате и времени
        ByDateTime = 2,
    }
    
    public class ReportLastExpenseDatesSortTypeItem {
        
        private ReportLastExpenseDatesSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportLastExpenseDatesSortTypeItem m_Random = new ReportLastExpenseDatesSortTypeItem(ReportLastExpenseDatesSortType.Random, "Random", "произвольно");
        
        private static ReportLastExpenseDatesSortTypeItem m_ByEmployee = new ReportLastExpenseDatesSortTypeItem(ReportLastExpenseDatesSortType.ByEmployee, "ByEmployee", "по сотруднику");
        
        private static ReportLastExpenseDatesSortTypeItem m_ByDateTime = new ReportLastExpenseDatesSortTypeItem(ReportLastExpenseDatesSortType.ByDateTime, "ByDateTime", "по дате и времени");
        
        private static ReportLastExpenseDatesSortTypeItem[] values = new ReportLastExpenseDatesSortTypeItem[] {
                ReportLastExpenseDatesSortTypeItem.m_Random,
                ReportLastExpenseDatesSortTypeItem.m_ByEmployee,
                ReportLastExpenseDatesSortTypeItem.m_ByDateTime};
        
        private ReportLastExpenseDatesSortTypeItem(ReportLastExpenseDatesSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportLastExpenseDatesSortTypeItem Random {
            get {
                return ReportLastExpenseDatesSortTypeItem.m_Random;
            }
        }
        
        public static ReportLastExpenseDatesSortTypeItem ByEmployee {
            get {
                return ReportLastExpenseDatesSortTypeItem.m_ByEmployee;
            }
        }
        
        public static ReportLastExpenseDatesSortTypeItem ByDateTime {
            get {
                return ReportLastExpenseDatesSortTypeItem.m_ByDateTime;
            }
        }
        
        public static ReportLastExpenseDatesSortTypeItem[] Values {
            get {
                return ReportLastExpenseDatesSortTypeItem.values;
            }
        }
        
        public ReportLastExpenseDatesSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportLastExpenseDatesSortTypeItem GetItem(ReportLastExpenseDatesSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportLastExpenseDatesSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportLastExpenseDatesSortTypeItem[] GetItems(ReportLastExpenseDatesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportLastExpenseDatesSortTypeItem[] result = new ReportLastExpenseDatesSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportLastExpenseDatesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportLastExpenseDatesSortType nValue) {
            return ReportLastExpenseDatesSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportLastExpenseDatesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportLastExpenseDatesSortType nValue) {
            return ReportLastExpenseDatesSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportLastExpenseDatesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportLastExpenseDatesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportLastExpenseDatesSortTypeItem value = ((ReportLastExpenseDatesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Список инцидентов и затрат проекта"
    public enum ReportProjectIncidentsAndExpensesSortType : short {
        
        /// Произвольно
        Random = 0,
        
        /// По инциденту/списанию
        ByIncident = 1,
        
        /// По решению
        BySolution = 2,
        
        /// По состоянию
        ByState = 3,
        
        /// По приоритету
        ByPriority = 4,
        
        /// По дате крайнего срока
        ByDeadLine = 5,
        
        /// По дате открытия
        ByInputDate = 6,
        
        /// По дате последней смены состояния
        ByLastChange = 7,
        
        /// По дате последней затраты времени
        ByLastSpent = 8,
        
        /// По роли
        ByRole = 9,
        
        /// По сотруднику
        ByEmployee = 10,
        
        /// По запланированному времени
        ByPlannedTime = 11,
        
        /// По общим трудозатратам
        BySpentTime = 12,
        
        /// По оставшемуся времени
        ByLeftTime = 13,
    }
    
    public class ReportProjectIncidentsAndExpensesSortTypeItem {
        
        private ReportProjectIncidentsAndExpensesSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_Random = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.Random, "Random", "Произвольно");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByIncident = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByIncident, "ByIncident", "По инциденту/списанию");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_BySolution = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.BySolution, "BySolution", "По решению");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByState = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByState, "ByState", "По состоянию");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByPriority = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByPriority, "ByPriority", "По приоритету");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByDeadLine = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByDeadLine, "ByDeadLine", "По дате крайнего срока");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByInputDate = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByInputDate, "ByInputDate", "По дате открытия");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByLastChange = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByLastChange, "ByLastChange", "По дате последней смены состояния");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByLastSpent = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByLastSpent, "ByLastSpent", "По дате последней затраты времени");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByRole = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByRole, "ByRole", "По роли");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByEmployee = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByEmployee, "ByEmployee", "По сотруднику");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByPlannedTime = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByPlannedTime, "ByPlannedTime", "По запланированному времени");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_BySpentTime = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.BySpentTime, "BySpentTime", "По общим трудозатратам");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem m_ByLeftTime = new ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType.ByLeftTime, "ByLeftTime", "По оставшемуся времени");
        
        private static ReportProjectIncidentsAndExpensesSortTypeItem[] values = new ReportProjectIncidentsAndExpensesSortTypeItem[] {
                ReportProjectIncidentsAndExpensesSortTypeItem.m_Random,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByIncident,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_BySolution,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByState,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByPriority,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByDeadLine,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByInputDate,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLastChange,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLastSpent,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByRole,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByEmployee,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByPlannedTime,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_BySpentTime,
                ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLeftTime};
        
        private ReportProjectIncidentsAndExpensesSortTypeItem(ReportProjectIncidentsAndExpensesSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem Random {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_Random;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByIncident {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByIncident;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem BySolution {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_BySolution;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByState {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByState;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByPriority {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByPriority;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByDeadLine {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByDeadLine;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByInputDate {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByInputDate;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByLastChange {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLastChange;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByLastSpent {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLastSpent;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByRole {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByRole;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByEmployee {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByEmployee;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByPlannedTime {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByPlannedTime;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem BySpentTime {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_BySpentTime;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem ByLeftTime {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.m_ByLeftTime;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem[] Values {
            get {
                return ReportProjectIncidentsAndExpensesSortTypeItem.values;
            }
        }
        
        public ReportProjectIncidentsAndExpensesSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem GetItem(ReportProjectIncidentsAndExpensesSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportProjectIncidentsAndExpensesSortTypeItem[] GetItems(ReportProjectIncidentsAndExpensesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportProjectIncidentsAndExpensesSortTypeItem[] result = new ReportProjectIncidentsAndExpensesSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportProjectIncidentsAndExpensesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportProjectIncidentsAndExpensesSortType nValue) {
            return ReportProjectIncidentsAndExpensesSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportProjectIncidentsAndExpensesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportProjectIncidentsAndExpensesSortType nValue) {
            return ReportProjectIncidentsAndExpensesSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportProjectIncidentsAndExpensesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportProjectIncidentsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectIncidentsAndExpensesSortTypeItem value = ((ReportProjectIncidentsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Список участников и затрат проекта"
    public enum ReportProjectParticipantsAndExpensesSortType : short {
        
        /// Произвольно
        Random = 0,
        
        /// По сотруднику
        ByEmployee = 1,
        
        /// По выполненным заданиям
        ByTasksDone = 2,
        
        /// По оставшимся заданиям
        ByTasksLeft = 3,
        
        /// По списанному времени
        ByLostTime = 4,
        
        /// По затраченному времени
        BySpentTime = 5,
        
        /// По запланированному времени
        ByPlannedTime = 6,
        
        /// По общим трудозатратам
        BySummaryTime = 7,
        
        /// По оставшемуся времени
        ByLeftTime = 8,
    }
    
    public class ReportProjectParticipantsAndExpensesSortTypeItem {
        
        private ReportProjectParticipantsAndExpensesSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_Random = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.Random, "Random", "Произвольно");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByEmployee = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByEmployee, "ByEmployee", "По сотруднику");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByTasksDone = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByTasksDone, "ByTasksDone", "По выполненным заданиям");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByTasksLeft = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByTasksLeft, "ByTasksLeft", "По оставшимся заданиям");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByLostTime = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByLostTime, "ByLostTime", "По списанному времени");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_BySpentTime = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.BySpentTime, "BySpentTime", "По затраченному времени");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByPlannedTime = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByPlannedTime, "ByPlannedTime", "По запланированному времени");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_BySummaryTime = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.BySummaryTime, "BySummaryTime", "По общим трудозатратам");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem m_ByLeftTime = new ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType.ByLeftTime, "ByLeftTime", "По оставшемуся времени");
        
        private static ReportProjectParticipantsAndExpensesSortTypeItem[] values = new ReportProjectParticipantsAndExpensesSortTypeItem[] {
                ReportProjectParticipantsAndExpensesSortTypeItem.m_Random,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByEmployee,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByTasksDone,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByTasksLeft,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByLostTime,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_BySpentTime,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByPlannedTime,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_BySummaryTime,
                ReportProjectParticipantsAndExpensesSortTypeItem.m_ByLeftTime};
        
        private ReportProjectParticipantsAndExpensesSortTypeItem(ReportProjectParticipantsAndExpensesSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem Random {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_Random;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByEmployee {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByEmployee;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByTasksDone {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByTasksDone;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByTasksLeft {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByTasksLeft;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByLostTime {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByLostTime;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem BySpentTime {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_BySpentTime;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByPlannedTime {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByPlannedTime;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem BySummaryTime {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_BySummaryTime;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem ByLeftTime {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.m_ByLeftTime;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem[] Values {
            get {
                return ReportProjectParticipantsAndExpensesSortTypeItem.values;
            }
        }
        
        public ReportProjectParticipantsAndExpensesSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem GetItem(ReportProjectParticipantsAndExpensesSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportProjectParticipantsAndExpensesSortTypeItem[] GetItems(ReportProjectParticipantsAndExpensesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportProjectParticipantsAndExpensesSortTypeItem[] result = new ReportProjectParticipantsAndExpensesSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportProjectParticipantsAndExpensesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportProjectParticipantsAndExpensesSortType nValue) {
            return ReportProjectParticipantsAndExpensesSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportProjectParticipantsAndExpensesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportProjectParticipantsAndExpensesSortType nValue) {
            return ReportProjectParticipantsAndExpensesSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportProjectParticipantsAndExpensesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportProjectParticipantsAndExpensesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportProjectParticipantsAndExpensesSortTypeItem value = ((ReportProjectParticipantsAndExpensesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете "Списание времени сотрудниками"
    public enum ReportTimeLossesSortType : short {
        
        /// произвольно
        Random = 0,
        
        /// по причине списания
        ByCause = 1,
        
        /// по сотруднику
        ByEmployee = 2,
        
        /// по дате списания
        ByLossFixed = 3,
    }
    
    public class ReportTimeLossesSortTypeItem {
        
        private ReportTimeLossesSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ReportTimeLossesSortTypeItem m_Random = new ReportTimeLossesSortTypeItem(ReportTimeLossesSortType.Random, "Random", "произвольно");
        
        private static ReportTimeLossesSortTypeItem m_ByCause = new ReportTimeLossesSortTypeItem(ReportTimeLossesSortType.ByCause, "ByCause", "по причине списания");
        
        private static ReportTimeLossesSortTypeItem m_ByEmployee = new ReportTimeLossesSortTypeItem(ReportTimeLossesSortType.ByEmployee, "ByEmployee", "по сотруднику");
        
        private static ReportTimeLossesSortTypeItem m_ByLossFixed = new ReportTimeLossesSortTypeItem(ReportTimeLossesSortType.ByLossFixed, "ByLossFixed", "по дате списания");
        
        private static ReportTimeLossesSortTypeItem[] values = new ReportTimeLossesSortTypeItem[] {
                ReportTimeLossesSortTypeItem.m_Random,
                ReportTimeLossesSortTypeItem.m_ByCause,
                ReportTimeLossesSortTypeItem.m_ByEmployee,
                ReportTimeLossesSortTypeItem.m_ByLossFixed};
        
        private ReportTimeLossesSortTypeItem(ReportTimeLossesSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ReportTimeLossesSortTypeItem Random {
            get {
                return ReportTimeLossesSortTypeItem.m_Random;
            }
        }
        
        public static ReportTimeLossesSortTypeItem ByCause {
            get {
                return ReportTimeLossesSortTypeItem.m_ByCause;
            }
        }
        
        public static ReportTimeLossesSortTypeItem ByEmployee {
            get {
                return ReportTimeLossesSortTypeItem.m_ByEmployee;
            }
        }
        
        public static ReportTimeLossesSortTypeItem ByLossFixed {
            get {
                return ReportTimeLossesSortTypeItem.m_ByLossFixed;
            }
        }
        
        public static ReportTimeLossesSortTypeItem[] Values {
            get {
                return ReportTimeLossesSortTypeItem.values;
            }
        }
        
        public ReportTimeLossesSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ReportTimeLossesSortTypeItem GetItem(ReportTimeLossesSortType nValue) {
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportTimeLossesSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ReportTimeLossesSortTypeItem[] GetItems(ReportTimeLossesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ReportTimeLossesSortTypeItem[] result = new ReportTimeLossesSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ReportTimeLossesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ReportTimeLossesSortType nValue) {
            return ReportTimeLossesSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ReportTimeLossesSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ReportTimeLossesSortType nValue) {
            return ReportTimeLossesSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ReportTimeLossesSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ReportTimeLossesSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ReportTimeLossesSortTypeItem value = ((ReportTimeLossesSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Секционирование по активностям
    public enum SectionByActivity : short {
        
        /// без секционирования
        NoSection = 0,
        
        /// по подчиненным активностям 1 уровня
        Stage1Section = 1,
        
        /// по подчиненным активностям всех уровней
        AllStagesSection = 2,
    }
    
    public class SectionByActivityItem {
        
        private SectionByActivity m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SectionByActivityItem m_NoSection = new SectionByActivityItem(SectionByActivity.NoSection, "NoSection", "без секционирования");
        
        private static SectionByActivityItem m_Stage1Section = new SectionByActivityItem(SectionByActivity.Stage1Section, "Stage1Section", "по подчиненным активностям 1 уровня");
        
        private static SectionByActivityItem m_AllStagesSection = new SectionByActivityItem(SectionByActivity.AllStagesSection, "AllStagesSection", "по подчиненным активностям всех уровней");
        
        private static SectionByActivityItem[] values = new SectionByActivityItem[] {
                SectionByActivityItem.m_NoSection,
                SectionByActivityItem.m_Stage1Section,
                SectionByActivityItem.m_AllStagesSection};
        
        private SectionByActivityItem(SectionByActivity value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SectionByActivityItem NoSection {
            get {
                return SectionByActivityItem.m_NoSection;
            }
        }
        
        public static SectionByActivityItem Stage1Section {
            get {
                return SectionByActivityItem.m_Stage1Section;
            }
        }
        
        public static SectionByActivityItem AllStagesSection {
            get {
                return SectionByActivityItem.m_AllStagesSection;
            }
        }
        
        public static SectionByActivityItem[] Values {
            get {
                return SectionByActivityItem.values;
            }
        }
        
        public SectionByActivity Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SectionByActivityItem GetItem(SectionByActivity nValue) {
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SectionByActivityItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SectionByActivityItem[] GetItems(SectionByActivity nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SectionByActivityItem[] result = new SectionByActivityItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SectionByActivity nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SectionByActivity nValue) {
            return SectionByActivityItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SectionByActivity nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SectionByActivity nValue) {
            return SectionByActivityItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SectionByActivity nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SectionByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectionByActivityItem value = ((SectionByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Секционирование по активностям 1
    public enum SectioningByActivity : short {
        
        /// без секционирования
        NoSectioning = 0,
        
        /// по активностям верхнего уровня
        SectioningByTopLevelActivity = 1,
    }
    
    public class SectioningByActivityItem {
        
        private SectioningByActivity m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SectioningByActivityItem m_NoSectioning = new SectioningByActivityItem(SectioningByActivity.NoSectioning, "NoSectioning", "без секционирования");
        
        private static SectioningByActivityItem m_SectioningByTopLevelActivity = new SectioningByActivityItem(SectioningByActivity.SectioningByTopLevelActivity, "SectioningByTopLevelActivity", "по активностям верхнего уровня");
        
        private static SectioningByActivityItem[] values = new SectioningByActivityItem[] {
                SectioningByActivityItem.m_NoSectioning,
                SectioningByActivityItem.m_SectioningByTopLevelActivity};
        
        private SectioningByActivityItem(SectioningByActivity value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SectioningByActivityItem NoSectioning {
            get {
                return SectioningByActivityItem.m_NoSectioning;
            }
        }
        
        public static SectioningByActivityItem SectioningByTopLevelActivity {
            get {
                return SectioningByActivityItem.m_SectioningByTopLevelActivity;
            }
        }
        
        public static SectioningByActivityItem[] Values {
            get {
                return SectioningByActivityItem.values;
            }
        }
        
        public SectioningByActivity Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SectioningByActivityItem GetItem(SectioningByActivity nValue) {
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SectioningByActivityItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SectioningByActivityItem[] GetItems(SectioningByActivity nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SectioningByActivityItem[] result = new SectioningByActivityItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SectioningByActivity nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SectioningByActivity nValue) {
            return SectioningByActivityItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SectioningByActivity nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SectioningByActivity nValue) {
            return SectioningByActivityItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SectioningByActivity nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SectioningByActivityItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SectioningByActivityItem value = ((SectioningByActivityItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип системы обслуживания
    public enum ServiceSystemType {
        
        /// Ссылка URL
        URL = 1,
        
        /// Ссылка на файл
        FileLink = 2,
        
        /// Ссылка на папку
        DirectoryLink = 3,
        
        /// Ссылка на файл в Documentum
        DocumentumFileLink = 4,
        
        /// Ссылка на папку в Documentum
        DocumentumDirectoryLink = 5,
    }
    
    public class ServiceSystemTypeItem {
        
        private ServiceSystemType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ServiceSystemTypeItem m_URL = new ServiceSystemTypeItem(ServiceSystemType.URL, "URL", "Ссылка URL");
        
        private static ServiceSystemTypeItem m_FileLink = new ServiceSystemTypeItem(ServiceSystemType.FileLink, "FileLink", "Ссылка на файл");
        
        private static ServiceSystemTypeItem m_DirectoryLink = new ServiceSystemTypeItem(ServiceSystemType.DirectoryLink, "DirectoryLink", "Ссылка на папку");
        
        private static ServiceSystemTypeItem m_DocumentumFileLink = new ServiceSystemTypeItem(ServiceSystemType.DocumentumFileLink, "DocumentumFileLink", "Ссылка на файл в Documentum");
        
        private static ServiceSystemTypeItem m_DocumentumDirectoryLink = new ServiceSystemTypeItem(ServiceSystemType.DocumentumDirectoryLink, "DocumentumDirectoryLink", "Ссылка на папку в Documentum");
        
        private static ServiceSystemTypeItem[] values = new ServiceSystemTypeItem[] {
                ServiceSystemTypeItem.m_URL,
                ServiceSystemTypeItem.m_FileLink,
                ServiceSystemTypeItem.m_DirectoryLink,
                ServiceSystemTypeItem.m_DocumentumFileLink,
                ServiceSystemTypeItem.m_DocumentumDirectoryLink};
        
        private ServiceSystemTypeItem(ServiceSystemType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ServiceSystemTypeItem URL {
            get {
                return ServiceSystemTypeItem.m_URL;
            }
        }
        
        public static ServiceSystemTypeItem FileLink {
            get {
                return ServiceSystemTypeItem.m_FileLink;
            }
        }
        
        public static ServiceSystemTypeItem DirectoryLink {
            get {
                return ServiceSystemTypeItem.m_DirectoryLink;
            }
        }
        
        public static ServiceSystemTypeItem DocumentumFileLink {
            get {
                return ServiceSystemTypeItem.m_DocumentumFileLink;
            }
        }
        
        public static ServiceSystemTypeItem DocumentumDirectoryLink {
            get {
                return ServiceSystemTypeItem.m_DocumentumDirectoryLink;
            }
        }
        
        public static ServiceSystemTypeItem[] Values {
            get {
                return ServiceSystemTypeItem.values;
            }
        }
        
        public ServiceSystemType Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ServiceSystemTypeItem GetItem(ServiceSystemType nValue) {
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ServiceSystemTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ServiceSystemTypeItem[] GetItems(ServiceSystemType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ServiceSystemTypeItem[] result = new ServiceSystemTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ServiceSystemType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ServiceSystemType nValue) {
            return ServiceSystemTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ServiceSystemType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ServiceSystemType nValue) {
            return ServiceSystemTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ServiceSystemType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ServiceSystemTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ServiceSystemTypeItem value = ((ServiceSystemTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Отображаемые атрибуты
    public enum ShowedAttrs : short {
        
        /// Приоритет
        Priority = 1,
    }
    
    public class ShowedAttrsItem {
        
        private ShowedAttrs m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static ShowedAttrsItem m_Priority = new ShowedAttrsItem(ShowedAttrs.Priority, "Priority", "Приоритет");
        
        private static ShowedAttrsItem[] values = new ShowedAttrsItem[] {
                ShowedAttrsItem.m_Priority};
        
        private ShowedAttrsItem(ShowedAttrs value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static ShowedAttrsItem Priority {
            get {
                return ShowedAttrsItem.m_Priority;
            }
        }
        
        public static ShowedAttrsItem[] Values {
            get {
                return ShowedAttrsItem.values;
            }
        }
        
        public ShowedAttrs Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static ShowedAttrsItem GetItem(ShowedAttrs nValue) {
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ShowedAttrsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static ShowedAttrsItem[] GetItems(ShowedAttrs nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            ShowedAttrsItem[] result = new ShowedAttrsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(ShowedAttrs nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(ShowedAttrs nValue) {
            return ShowedAttrsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(ShowedAttrs nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(ShowedAttrs nValue) {
            return ShowedAttrsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(ShowedAttrs nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = ShowedAttrsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                ShowedAttrsItem value = ((ShowedAttrsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Направления сортировки
    public enum SortDirections : short {
        
        /// По возрастанию
        ASC = 1,
        
        /// По убыванию
        DESC = 2,
        
        /// Игнорировать
        Ignore = 3,
    }
    
    public class SortDirectionsItem {
        
        private SortDirections m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SortDirectionsItem m_ASC = new SortDirectionsItem(SortDirections.ASC, "ASC", "По возрастанию");
        
        private static SortDirectionsItem m_DESC = new SortDirectionsItem(SortDirections.DESC, "DESC", "По убыванию");
        
        private static SortDirectionsItem m_Ignore = new SortDirectionsItem(SortDirections.Ignore, "Ignore", "Игнорировать");
        
        private static SortDirectionsItem[] values = new SortDirectionsItem[] {
                SortDirectionsItem.m_ASC,
                SortDirectionsItem.m_DESC,
                SortDirectionsItem.m_Ignore};
        
        private SortDirectionsItem(SortDirections value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SortDirectionsItem ASC {
            get {
                return SortDirectionsItem.m_ASC;
            }
        }
        
        public static SortDirectionsItem DESC {
            get {
                return SortDirectionsItem.m_DESC;
            }
        }
        
        public static SortDirectionsItem Ignore {
            get {
                return SortDirectionsItem.m_Ignore;
            }
        }
        
        public static SortDirectionsItem[] Values {
            get {
                return SortDirectionsItem.values;
            }
        }
        
        public SortDirections Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SortDirectionsItem GetItem(SortDirections nValue) {
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortDirectionsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortDirectionsItem[] GetItems(SortDirections nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SortDirectionsItem[] result = new SortDirectionsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SortDirections nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SortDirections nValue) {
            return SortDirectionsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SortDirections nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SortDirections nValue) {
            return SortDirectionsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SortDirections nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortDirectionsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortDirectionsItem value = ((SortDirectionsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Сортировка затрат сотрудников
    public enum SortExpences : short {
        
        /// произвольно
        NoSort = 0,
        
        /// по сотруднику
        ByEmployee = 1,
        
        /// по норме
        ByNorm = 2,
    }
    
    public class SortExpencesItem {
        
        private SortExpences m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SortExpencesItem m_NoSort = new SortExpencesItem(SortExpences.NoSort, "NoSort", "произвольно");
        
        private static SortExpencesItem m_ByEmployee = new SortExpencesItem(SortExpences.ByEmployee, "ByEmployee", "по сотруднику");
        
        private static SortExpencesItem m_ByNorm = new SortExpencesItem(SortExpences.ByNorm, "ByNorm", "по норме");
        
        private static SortExpencesItem[] values = new SortExpencesItem[] {
                SortExpencesItem.m_NoSort,
                SortExpencesItem.m_ByEmployee,
                SortExpencesItem.m_ByNorm};
        
        private SortExpencesItem(SortExpences value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SortExpencesItem NoSort {
            get {
                return SortExpencesItem.m_NoSort;
            }
        }
        
        public static SortExpencesItem ByEmployee {
            get {
                return SortExpencesItem.m_ByEmployee;
            }
        }
        
        public static SortExpencesItem ByNorm {
            get {
                return SortExpencesItem.m_ByNorm;
            }
        }
        
        public static SortExpencesItem[] Values {
            get {
                return SortExpencesItem.values;
            }
        }
        
        public SortExpences Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SortExpencesItem GetItem(SortExpences nValue) {
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortExpencesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortExpencesItem[] GetItems(SortExpences nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SortExpencesItem[] result = new SortExpencesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SortExpences nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SortExpences nValue) {
            return SortExpencesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SortExpences nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SortExpences nValue) {
            return SortExpencesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SortExpences nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortExpencesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortExpencesItem value = ((SortExpencesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Сортировка инцидентов и затрат
    public enum SortIncidentExpenses : short {
        
        /// по дате и времени
        ByDateTime = 0,
        
        /// по причине списания
        ByLossReason = 1,
        
        /// по затраченному времени
        BySpentTime = 2,
    }
    
    public class SortIncidentExpensesItem {
        
        private SortIncidentExpenses m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SortIncidentExpensesItem m_ByDateTime = new SortIncidentExpensesItem(SortIncidentExpenses.ByDateTime, "ByDateTime", "по дате и времени");
        
        private static SortIncidentExpensesItem m_ByLossReason = new SortIncidentExpensesItem(SortIncidentExpenses.ByLossReason, "ByLossReason", "по причине списания");
        
        private static SortIncidentExpensesItem m_BySpentTime = new SortIncidentExpensesItem(SortIncidentExpenses.BySpentTime, "BySpentTime", "по затраченному времени");
        
        private static SortIncidentExpensesItem[] values = new SortIncidentExpensesItem[] {
                SortIncidentExpensesItem.m_ByDateTime,
                SortIncidentExpensesItem.m_ByLossReason,
                SortIncidentExpensesItem.m_BySpentTime};
        
        private SortIncidentExpensesItem(SortIncidentExpenses value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SortIncidentExpensesItem ByDateTime {
            get {
                return SortIncidentExpensesItem.m_ByDateTime;
            }
        }
        
        public static SortIncidentExpensesItem ByLossReason {
            get {
                return SortIncidentExpensesItem.m_ByLossReason;
            }
        }
        
        public static SortIncidentExpensesItem BySpentTime {
            get {
                return SortIncidentExpensesItem.m_BySpentTime;
            }
        }
        
        public static SortIncidentExpensesItem[] Values {
            get {
                return SortIncidentExpensesItem.values;
            }
        }
        
        public SortIncidentExpenses Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SortIncidentExpensesItem GetItem(SortIncidentExpenses nValue) {
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortIncidentExpensesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortIncidentExpensesItem[] GetItems(SortIncidentExpenses nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SortIncidentExpensesItem[] result = new SortIncidentExpensesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SortIncidentExpenses nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SortIncidentExpenses nValue) {
            return SortIncidentExpensesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SortIncidentExpenses nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SortIncidentExpenses nValue) {
            return SortIncidentExpensesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SortIncidentExpenses nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortIncidentExpensesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortIncidentExpensesItem value = ((SortIncidentExpensesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Порядок сортировки
    public enum SortOrder : short {
        
        /// По возрастанию
        Asc = 1,
        
        /// По убыванию
        Desc = 2,
    }
    
    public class SortOrderItem {
        
        private SortOrder m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SortOrderItem m_Asc = new SortOrderItem(SortOrder.Asc, "Asc", "По возрастанию");
        
        private static SortOrderItem m_Desc = new SortOrderItem(SortOrder.Desc, "Desc", "По убыванию");
        
        private static SortOrderItem[] values = new SortOrderItem[] {
                SortOrderItem.m_Asc,
                SortOrderItem.m_Desc};
        
        private SortOrderItem(SortOrder value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SortOrderItem Asc {
            get {
                return SortOrderItem.m_Asc;
            }
        }
        
        public static SortOrderItem Desc {
            get {
                return SortOrderItem.m_Desc;
            }
        }
        
        public static SortOrderItem[] Values {
            get {
                return SortOrderItem.values;
            }
        }
        
        public SortOrder Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SortOrderItem GetItem(SortOrder nValue) {
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortOrderItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SortOrderItem[] GetItems(SortOrder nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SortOrderItem[] result = new SortOrderItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SortOrder nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SortOrder nValue) {
            return SortOrderItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SortOrder nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SortOrder nValue) {
            return SortOrderItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SortOrder nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SortOrderItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SortOrderItem value = ((SortOrderItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Стартовые страницы
    public enum StartPages : short {
        
        /// Список текущих задач (Мои инциденты)
        CurrentTaskList = 1,
        
        /// Иерархия Клиентов и проектов
        DKP = 2,
        
        /// Отчеты
        Reports = 3,
        
        /// Стартовая страница Системы учета тендеров
        TMS = 4,
        
        /// Список тендеров
        TenderList = 5,
    }
    
    public class StartPagesItem {
        
        private StartPages m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static StartPagesItem m_CurrentTaskList = new StartPagesItem(StartPages.CurrentTaskList, "CurrentTaskList", "Список текущих задач (Мои инциденты)");
        
        private static StartPagesItem m_DKP = new StartPagesItem(StartPages.DKP, "DKP", "Иерархия Клиентов и проектов");
        
        private static StartPagesItem m_Reports = new StartPagesItem(StartPages.Reports, "Reports", "Отчеты");
        
        private static StartPagesItem m_TMS = new StartPagesItem(StartPages.TMS, "TMS", "Стартовая страница Системы учета тендеров");
        
        private static StartPagesItem m_TenderList = new StartPagesItem(StartPages.TenderList, "TenderList", "Список тендеров");
        
        private static StartPagesItem[] values = new StartPagesItem[] {
                StartPagesItem.m_CurrentTaskList,
                StartPagesItem.m_DKP,
                StartPagesItem.m_Reports,
                StartPagesItem.m_TMS,
                StartPagesItem.m_TenderList};
        
        private StartPagesItem(StartPages value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static StartPagesItem CurrentTaskList {
            get {
                return StartPagesItem.m_CurrentTaskList;
            }
        }
        
        public static StartPagesItem DKP {
            get {
                return StartPagesItem.m_DKP;
            }
        }
        
        public static StartPagesItem Reports {
            get {
                return StartPagesItem.m_Reports;
            }
        }
        
        public static StartPagesItem TMS {
            get {
                return StartPagesItem.m_TMS;
            }
        }
        
        public static StartPagesItem TenderList {
            get {
                return StartPagesItem.m_TenderList;
            }
        }
        
        public static StartPagesItem[] Values {
            get {
                return StartPagesItem.values;
            }
        }
        
        public StartPages Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static StartPagesItem GetItem(StartPages nValue) {
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static StartPagesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static StartPagesItem[] GetItems(StartPages nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            StartPagesItem[] result = new StartPagesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(StartPages nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(StartPages nValue) {
            return StartPagesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(StartPages nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(StartPages nValue) {
            return StartPagesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(StartPages nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = StartPagesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StartPagesItem value = ((StartPagesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Стандартные объектные привилегии
    [Flags()]
    public enum StdObjectPrivileges : short {
        
        /// Создание
        Create = 1,
        
        /// Редактирование
        Edit = 2,
        
        /// Удаление
        Delete = 4,
        
        /// Чтение
        Read = 8,
    }
    
    public class StdObjectPrivilegesItem {
        
        private StdObjectPrivileges m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static StdObjectPrivilegesItem m_Create = new StdObjectPrivilegesItem(StdObjectPrivileges.Create, "Create", "Создание");
        
        private static StdObjectPrivilegesItem m_Edit = new StdObjectPrivilegesItem(StdObjectPrivileges.Edit, "Edit", "Редактирование");
        
        private static StdObjectPrivilegesItem m_Delete = new StdObjectPrivilegesItem(StdObjectPrivileges.Delete, "Delete", "Удаление");
        
        private static StdObjectPrivilegesItem m_Read = new StdObjectPrivilegesItem(StdObjectPrivileges.Read, "Read", "Чтение");
        
        private static StdObjectPrivilegesItem[] values = new StdObjectPrivilegesItem[] {
                StdObjectPrivilegesItem.m_Create,
                StdObjectPrivilegesItem.m_Edit,
                StdObjectPrivilegesItem.m_Delete,
                StdObjectPrivilegesItem.m_Read};
        
        private StdObjectPrivilegesItem(StdObjectPrivileges value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static StdObjectPrivilegesItem Create {
            get {
                return StdObjectPrivilegesItem.m_Create;
            }
        }
        
        public static StdObjectPrivilegesItem Edit {
            get {
                return StdObjectPrivilegesItem.m_Edit;
            }
        }
        
        public static StdObjectPrivilegesItem Delete {
            get {
                return StdObjectPrivilegesItem.m_Delete;
            }
        }
        
        public static StdObjectPrivilegesItem Read {
            get {
                return StdObjectPrivilegesItem.m_Read;
            }
        }
        
        public static StdObjectPrivilegesItem[] Values {
            get {
                return StdObjectPrivilegesItem.values;
            }
        }
        
        public StdObjectPrivileges Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static StdObjectPrivilegesItem GetItem(StdObjectPrivileges nValue) {
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static StdObjectPrivilegesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static StdObjectPrivilegesItem[] GetItems(StdObjectPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            StdObjectPrivilegesItem[] result = new StdObjectPrivilegesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(StdObjectPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(StdObjectPrivileges nValue) {
            return StdObjectPrivilegesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(StdObjectPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(StdObjectPrivileges nValue) {
            return StdObjectPrivilegesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(StdObjectPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = StdObjectPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                StdObjectPrivilegesItem value = ((StdObjectPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Системные привилегии
    [Flags()]
    public enum SystemPrivileges {
        
        /// Настройка workflow инцидентов
        SetUpIncidentWorkflow = 1,
        
        /// Установка глобального периода блокирования списаний
        SetUpGlobalBlockPeriod = 2,
        
        /// Управление пользователями
        ManageUsers = 4,
        
        /// Управление чужими списаниями
        ManageTimeLoss = 8,
        
        /// Управление временным описанием организации
        TempOrganizationManagment = 16,
        
        /// Управление организациями
        OrganizationManagement = 32,
        
        /// Управление справочниками
        ManageRefObjects = 64,
        
        /// Доступ к Системе учета тендеров
        AccessIntoTMS = 128,
        
        /// Перенос папок и инцидентов
        MoveFoldersAndIncidents = 256,
        
        /// Просмотр всех Организаций
        ViewAllOrganizations = 512,
        
        /// Замена временного описания Организации постоянным
        ChangeTempOrgOnConst = 4096,
        
        /// Принимающий решение в СУТ
        DecidingManInTMS = 8192,
        
        /// Управление справочниками СУТ
        ManageRefObjectsInTMS = 16384,
        
        /// Закрытие активностей
        CloseAnyFolder = 32768,
        
        /// Управление ролью Директор Аккаунта
        ManageDirectorAccount = 65536,
        
        /// Управление проектной командой
        ManageProjectTeam = 131072,
    }
    
    public class SystemPrivilegesItem {
        
        private SystemPrivileges m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static SystemPrivilegesItem m_SetUpIncidentWorkflow = new SystemPrivilegesItem(SystemPrivileges.SetUpIncidentWorkflow, "SetUpIncidentWorkflow", "Настройка workflow инцидентов");
        
        private static SystemPrivilegesItem m_SetUpGlobalBlockPeriod = new SystemPrivilegesItem(SystemPrivileges.SetUpGlobalBlockPeriod, "SetUpGlobalBlockPeriod", "Установка глобального периода блокирования списаний");
        
        private static SystemPrivilegesItem m_ManageUsers = new SystemPrivilegesItem(SystemPrivileges.ManageUsers, "ManageUsers", "Управление пользователями");
        
        private static SystemPrivilegesItem m_ManageTimeLoss = new SystemPrivilegesItem(SystemPrivileges.ManageTimeLoss, "ManageTimeLoss", "Управление чужими списаниями");
        
        private static SystemPrivilegesItem m_TempOrganizationManagment = new SystemPrivilegesItem(SystemPrivileges.TempOrganizationManagment, "TempOrganizationManagment", "Управление временным описанием организации");
        
        private static SystemPrivilegesItem m_OrganizationManagement = new SystemPrivilegesItem(SystemPrivileges.OrganizationManagement, "OrganizationManagement", "Управление организациями");
        
        private static SystemPrivilegesItem m_ManageRefObjects = new SystemPrivilegesItem(SystemPrivileges.ManageRefObjects, "ManageRefObjects", "Управление справочниками");
        
        private static SystemPrivilegesItem m_AccessIntoTMS = new SystemPrivilegesItem(SystemPrivileges.AccessIntoTMS, "AccessIntoTMS", "Доступ к Системе учета тендеров");
        
        private static SystemPrivilegesItem m_MoveFoldersAndIncidents = new SystemPrivilegesItem(SystemPrivileges.MoveFoldersAndIncidents, "MoveFoldersAndIncidents", "Перенос папок и инцидентов");
        
        private static SystemPrivilegesItem m_ViewAllOrganizations = new SystemPrivilegesItem(SystemPrivileges.ViewAllOrganizations, "ViewAllOrganizations", "Просмотр всех Организаций");
        
        private static SystemPrivilegesItem m_ChangeTempOrgOnConst = new SystemPrivilegesItem(SystemPrivileges.ChangeTempOrgOnConst, "ChangeTempOrgOnConst", "Замена временного описания Организации постоянным");
        
        private static SystemPrivilegesItem m_DecidingManInTMS = new SystemPrivilegesItem(SystemPrivileges.DecidingManInTMS, "DecidingManInTMS", "Принимающий решение в СУТ");
        
        private static SystemPrivilegesItem m_ManageRefObjectsInTMS = new SystemPrivilegesItem(SystemPrivileges.ManageRefObjectsInTMS, "ManageRefObjectsInTMS", "Управление справочниками СУТ");
        
        private static SystemPrivilegesItem m_CloseAnyFolder = new SystemPrivilegesItem(SystemPrivileges.CloseAnyFolder, "CloseAnyFolder", "Закрытие активностей");
        
        private static SystemPrivilegesItem m_ManageDirectorAccount = new SystemPrivilegesItem(SystemPrivileges.ManageDirectorAccount, "ManageDirectorAccount", "Управление ролью Директор Аккаунта");
        
        private static SystemPrivilegesItem m_ManageProjectTeam = new SystemPrivilegesItem(SystemPrivileges.ManageProjectTeam, "ManageProjectTeam", "Управление проектной командой");
        
        private static SystemPrivilegesItem[] values = new SystemPrivilegesItem[] {
                SystemPrivilegesItem.m_SetUpIncidentWorkflow,
                SystemPrivilegesItem.m_SetUpGlobalBlockPeriod,
                SystemPrivilegesItem.m_ManageUsers,
                SystemPrivilegesItem.m_ManageTimeLoss,
                SystemPrivilegesItem.m_TempOrganizationManagment,
                SystemPrivilegesItem.m_OrganizationManagement,
                SystemPrivilegesItem.m_ManageRefObjects,
                SystemPrivilegesItem.m_AccessIntoTMS,
                SystemPrivilegesItem.m_MoveFoldersAndIncidents,
                SystemPrivilegesItem.m_ViewAllOrganizations,
                SystemPrivilegesItem.m_ChangeTempOrgOnConst,
                SystemPrivilegesItem.m_DecidingManInTMS,
                SystemPrivilegesItem.m_ManageRefObjectsInTMS,
                SystemPrivilegesItem.m_CloseAnyFolder,
                SystemPrivilegesItem.m_ManageDirectorAccount,
                SystemPrivilegesItem.m_ManageProjectTeam};
        
        private SystemPrivilegesItem(SystemPrivileges value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static SystemPrivilegesItem SetUpIncidentWorkflow {
            get {
                return SystemPrivilegesItem.m_SetUpIncidentWorkflow;
            }
        }
        
        public static SystemPrivilegesItem SetUpGlobalBlockPeriod {
            get {
                return SystemPrivilegesItem.m_SetUpGlobalBlockPeriod;
            }
        }
        
        public static SystemPrivilegesItem ManageUsers {
            get {
                return SystemPrivilegesItem.m_ManageUsers;
            }
        }
        
        public static SystemPrivilegesItem ManageTimeLoss {
            get {
                return SystemPrivilegesItem.m_ManageTimeLoss;
            }
        }
        
        public static SystemPrivilegesItem TempOrganizationManagment {
            get {
                return SystemPrivilegesItem.m_TempOrganizationManagment;
            }
        }
        
        public static SystemPrivilegesItem OrganizationManagement {
            get {
                return SystemPrivilegesItem.m_OrganizationManagement;
            }
        }
        
        public static SystemPrivilegesItem ManageRefObjects {
            get {
                return SystemPrivilegesItem.m_ManageRefObjects;
            }
        }
        
        public static SystemPrivilegesItem AccessIntoTMS {
            get {
                return SystemPrivilegesItem.m_AccessIntoTMS;
            }
        }
        
        public static SystemPrivilegesItem MoveFoldersAndIncidents {
            get {
                return SystemPrivilegesItem.m_MoveFoldersAndIncidents;
            }
        }
        
        public static SystemPrivilegesItem ViewAllOrganizations {
            get {
                return SystemPrivilegesItem.m_ViewAllOrganizations;
            }
        }
        
        public static SystemPrivilegesItem ChangeTempOrgOnConst {
            get {
                return SystemPrivilegesItem.m_ChangeTempOrgOnConst;
            }
        }
        
        public static SystemPrivilegesItem DecidingManInTMS {
            get {
                return SystemPrivilegesItem.m_DecidingManInTMS;
            }
        }
        
        public static SystemPrivilegesItem ManageRefObjectsInTMS {
            get {
                return SystemPrivilegesItem.m_ManageRefObjectsInTMS;
            }
        }
        
        public static SystemPrivilegesItem CloseAnyFolder {
            get {
                return SystemPrivilegesItem.m_CloseAnyFolder;
            }
        }
        
        public static SystemPrivilegesItem ManageDirectorAccount {
            get {
                return SystemPrivilegesItem.m_ManageDirectorAccount;
            }
        }
        
        public static SystemPrivilegesItem ManageProjectTeam {
            get {
                return SystemPrivilegesItem.m_ManageProjectTeam;
            }
        }
        
        public static SystemPrivilegesItem[] Values {
            get {
                return SystemPrivilegesItem.values;
            }
        }
        
        public SystemPrivileges Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static SystemPrivilegesItem GetItem(SystemPrivileges nValue) {
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SystemPrivilegesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static SystemPrivilegesItem[] GetItems(SystemPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            SystemPrivilegesItem[] result = new SystemPrivilegesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(SystemPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(SystemPrivileges nValue) {
            return SystemPrivilegesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(SystemPrivileges nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(SystemPrivileges nValue) {
            return SystemPrivilegesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(SystemPrivileges nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = SystemPrivilegesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                SystemPrivilegesItem value = ((SystemPrivilegesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип сортировки в отчете Тендеры
    public enum TenderSortType : short {
        
        /// Произвольно
        Random = 0,
        
        /// По наименованию конкурса
        ByTenderName = 1,
        
        /// По наименованию заказчика
        ByCustomerName = 2,
        
        /// По дате подачи документов
        ByDocFeedingDate = 3,
    }
    
    public class TenderSortTypeItem {
        
        private TenderSortType m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static TenderSortTypeItem m_Random = new TenderSortTypeItem(TenderSortType.Random, "Random", "Произвольно");
        
        private static TenderSortTypeItem m_ByTenderName = new TenderSortTypeItem(TenderSortType.ByTenderName, "ByTenderName", "По наименованию конкурса");
        
        private static TenderSortTypeItem m_ByCustomerName = new TenderSortTypeItem(TenderSortType.ByCustomerName, "ByCustomerName", "По наименованию заказчика");
        
        private static TenderSortTypeItem m_ByDocFeedingDate = new TenderSortTypeItem(TenderSortType.ByDocFeedingDate, "ByDocFeedingDate", "По дате подачи документов");
        
        private static TenderSortTypeItem[] values = new TenderSortTypeItem[] {
                TenderSortTypeItem.m_Random,
                TenderSortTypeItem.m_ByTenderName,
                TenderSortTypeItem.m_ByCustomerName,
                TenderSortTypeItem.m_ByDocFeedingDate};
        
        private TenderSortTypeItem(TenderSortType value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static TenderSortTypeItem Random {
            get {
                return TenderSortTypeItem.m_Random;
            }
        }
        
        public static TenderSortTypeItem ByTenderName {
            get {
                return TenderSortTypeItem.m_ByTenderName;
            }
        }
        
        public static TenderSortTypeItem ByCustomerName {
            get {
                return TenderSortTypeItem.m_ByCustomerName;
            }
        }
        
        public static TenderSortTypeItem ByDocFeedingDate {
            get {
                return TenderSortTypeItem.m_ByDocFeedingDate;
            }
        }
        
        public static TenderSortTypeItem[] Values {
            get {
                return TenderSortTypeItem.values;
            }
        }
        
        public TenderSortType Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static TenderSortTypeItem GetItem(TenderSortType nValue) {
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TenderSortTypeItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TenderSortTypeItem[] GetItems(TenderSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            TenderSortTypeItem[] result = new TenderSortTypeItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(TenderSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(TenderSortType nValue) {
            return TenderSortTypeItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(TenderSortType nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(TenderSortType nValue) {
            return TenderSortTypeItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(TenderSortType nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TenderSortTypeItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TenderSortTypeItem value = ((TenderSortTypeItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип причины списания
    public enum TimeLossCauseTypes : short {
        
        /// Требует применение к папке
        MustApplicableToFolder = 1,
        
        /// Не может быть применена к папке
        NotApplicableToFolder = 2,
        
        /// Может быть применена к папке
        ApplicableToFolder = 3,
    }
    
    public class TimeLossCauseTypesItem {
        
        private TimeLossCauseTypes m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static TimeLossCauseTypesItem m_MustApplicableToFolder = new TimeLossCauseTypesItem(TimeLossCauseTypes.MustApplicableToFolder, "MustApplicableToFolder", "Требует применение к папке");
        
        private static TimeLossCauseTypesItem m_NotApplicableToFolder = new TimeLossCauseTypesItem(TimeLossCauseTypes.NotApplicableToFolder, "NotApplicableToFolder", "Не может быть применена к папке");
        
        private static TimeLossCauseTypesItem m_ApplicableToFolder = new TimeLossCauseTypesItem(TimeLossCauseTypes.ApplicableToFolder, "ApplicableToFolder", "Может быть применена к папке");
        
        private static TimeLossCauseTypesItem[] values = new TimeLossCauseTypesItem[] {
                TimeLossCauseTypesItem.m_MustApplicableToFolder,
                TimeLossCauseTypesItem.m_NotApplicableToFolder,
                TimeLossCauseTypesItem.m_ApplicableToFolder};
        
        private TimeLossCauseTypesItem(TimeLossCauseTypes value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static TimeLossCauseTypesItem MustApplicableToFolder {
            get {
                return TimeLossCauseTypesItem.m_MustApplicableToFolder;
            }
        }
        
        public static TimeLossCauseTypesItem NotApplicableToFolder {
            get {
                return TimeLossCauseTypesItem.m_NotApplicableToFolder;
            }
        }
        
        public static TimeLossCauseTypesItem ApplicableToFolder {
            get {
                return TimeLossCauseTypesItem.m_ApplicableToFolder;
            }
        }
        
        public static TimeLossCauseTypesItem[] Values {
            get {
                return TimeLossCauseTypesItem.values;
            }
        }
        
        public TimeLossCauseTypes Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static TimeLossCauseTypesItem GetItem(TimeLossCauseTypes nValue) {
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TimeLossCauseTypesItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TimeLossCauseTypesItem[] GetItems(TimeLossCauseTypes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            TimeLossCauseTypesItem[] result = new TimeLossCauseTypesItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(TimeLossCauseTypes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(TimeLossCauseTypes nValue) {
            return TimeLossCauseTypesItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(TimeLossCauseTypes nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(TimeLossCauseTypes nValue) {
            return TimeLossCauseTypesItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(TimeLossCauseTypes nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TimeLossCauseTypesItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeLossCauseTypesItem value = ((TimeLossCauseTypesItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Единицы измерения времени
    public enum TimeMeasureUnits : short {
        
        /// Дни, часы, минуты
        Days = 0,
        
        /// Часы
        Hours = 1,
    }
    
    public class TimeMeasureUnitsItem {
        
        private TimeMeasureUnits m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static TimeMeasureUnitsItem m_Days = new TimeMeasureUnitsItem(TimeMeasureUnits.Days, "Days", "Дни, часы, минуты");
        
        private static TimeMeasureUnitsItem m_Hours = new TimeMeasureUnitsItem(TimeMeasureUnits.Hours, "Hours", "Часы");
        
        private static TimeMeasureUnitsItem[] values = new TimeMeasureUnitsItem[] {
                TimeMeasureUnitsItem.m_Days,
                TimeMeasureUnitsItem.m_Hours};
        
        private TimeMeasureUnitsItem(TimeMeasureUnits value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static TimeMeasureUnitsItem Days {
            get {
                return TimeMeasureUnitsItem.m_Days;
            }
        }
        
        public static TimeMeasureUnitsItem Hours {
            get {
                return TimeMeasureUnitsItem.m_Hours;
            }
        }
        
        public static TimeMeasureUnitsItem[] Values {
            get {
                return TimeMeasureUnitsItem.values;
            }
        }
        
        public TimeMeasureUnits Value {
            get {
                return this.m_value;
            }
        }
        
        public short IntValue {
            get {
                return System.Convert.ToInt16(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static TimeMeasureUnitsItem GetItem(TimeMeasureUnits nValue) {
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TimeMeasureUnitsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static TimeMeasureUnitsItem[] GetItems(TimeMeasureUnits nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            TimeMeasureUnitsItem[] result = new TimeMeasureUnitsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(TimeMeasureUnits nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(TimeMeasureUnits nValue) {
            return TimeMeasureUnitsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(TimeMeasureUnits nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(TimeMeasureUnits nValue) {
            return TimeMeasureUnitsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(TimeMeasureUnits nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = TimeMeasureUnitsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                TimeMeasureUnitsItem value = ((TimeMeasureUnitsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
    
    /// Тип роли пользователя в папке
    [Flags()]
    public enum UserRoleInProjectFlags {
        
        /// Менеджер проекта
        ProjectManager = 1,
        
        /// Администратор проекта
        ProjectAdministrator = 2,
        
        /// Директор клиента
        ClientDirector = 4,
    }
    
    public class UserRoleInProjectFlagsItem {
        
        private UserRoleInProjectFlags m_value;
        
        private string m_sName;
        
        private string m_sDescription;
        
        private static UserRoleInProjectFlagsItem m_ProjectManager = new UserRoleInProjectFlagsItem(UserRoleInProjectFlags.ProjectManager, "ProjectManager", "Менеджер проекта");
        
        private static UserRoleInProjectFlagsItem m_ProjectAdministrator = new UserRoleInProjectFlagsItem(UserRoleInProjectFlags.ProjectAdministrator, "ProjectAdministrator", "Администратор проекта");
        
        private static UserRoleInProjectFlagsItem m_ClientDirector = new UserRoleInProjectFlagsItem(UserRoleInProjectFlags.ClientDirector, "ClientDirector", "Директор клиента");
        
        private static UserRoleInProjectFlagsItem[] values = new UserRoleInProjectFlagsItem[] {
                UserRoleInProjectFlagsItem.m_ProjectManager,
                UserRoleInProjectFlagsItem.m_ProjectAdministrator,
                UserRoleInProjectFlagsItem.m_ClientDirector};
        
        private UserRoleInProjectFlagsItem(UserRoleInProjectFlags value, string sName, string sDescription) {
            this.m_value = value;
            this.m_sName = sName;
            this.m_sDescription = sDescription;
        }
        
        public static UserRoleInProjectFlagsItem ProjectManager {
            get {
                return UserRoleInProjectFlagsItem.m_ProjectManager;
            }
        }
        
        public static UserRoleInProjectFlagsItem ProjectAdministrator {
            get {
                return UserRoleInProjectFlagsItem.m_ProjectAdministrator;
            }
        }
        
        public static UserRoleInProjectFlagsItem ClientDirector {
            get {
                return UserRoleInProjectFlagsItem.m_ClientDirector;
            }
        }
        
        public static UserRoleInProjectFlagsItem[] Values {
            get {
                return UserRoleInProjectFlagsItem.values;
            }
        }
        
        public UserRoleInProjectFlags Value {
            get {
                return this.m_value;
            }
        }
        
        public int IntValue {
            get {
                return System.Convert.ToInt32(this.m_value);
            }
        }
        
        public string Name {
            get {
                return this.m_sName;
            }
        }
        
        public string Description {
            get {
                return this.m_sDescription;
            }
        }
        
        public static UserRoleInProjectFlagsItem GetItem(UserRoleInProjectFlags nValue) {
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if ((value.Value == nValue)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static UserRoleInProjectFlagsItem GetItem(string sName) {
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if ((value.Name == sName)) {
                    return value;
                }
            }
            throw new System.ArgumentException("Неизвестное значение");
        }
        
        public static UserRoleInProjectFlagsItem[] GetItems(UserRoleInProjectFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value);
                }
            }
            UserRoleInProjectFlagsItem[] result = new UserRoleInProjectFlagsItem[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
        
        public static string ToStringOfNames(UserRoleInProjectFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Name);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfNames(UserRoleInProjectFlags nValue) {
            return UserRoleInProjectFlagsItem.ToStringOfNames(nValue, ", ");
        }
        
        public static string ToStringOfDescriptions(UserRoleInProjectFlags nValue, string sSeparator) {
            System.Text.StringBuilder bld = new System.Text.StringBuilder();
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    if ((bld.Length > 0)) {
                        bld.Append(sSeparator);
                    }
                    bld.Append(value.Description);
                }
            }
            return bld.ToString();
        }
        
        public static string ToStringOfDescriptions(UserRoleInProjectFlags nValue) {
            return UserRoleInProjectFlagsItem.ToStringOfDescriptions(nValue, ", ");
        }
        
        public static string[] GetNames(UserRoleInProjectFlags nValue) {
            System.Collections.ArrayList aValues = new System.Collections.ArrayList();
            for (System.Collections.IEnumerator enumerator = UserRoleInProjectFlagsItem.Values.GetEnumerator(); enumerator.MoveNext(); 
            ) {
                UserRoleInProjectFlagsItem value = ((UserRoleInProjectFlagsItem)(enumerator.Current));
                if (((value.Value & nValue) 
                            > 0)) {
                    aValues.Add(value.Name);
                }
            }
            string[] result = new string[aValues.Count];
            aValues.CopyTo(result);
            return result;
        }
    }
}
